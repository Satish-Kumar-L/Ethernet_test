
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005968  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c84  08005c84  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08005c84  08005c84  00015c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c8c  08005c8c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c8c  08005c8c  00015c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08005c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200000a0  08005d34  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08005d34  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fabc  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251a  00000000  00000000  0002fb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  000320a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00032e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025895  00000000  00000000  00033ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2de  00000000  00000000  0005936d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed37d  00000000  00000000  0006764b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001549c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad4  00000000  00000000  00154a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005b30 	.word	0x08005b30

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a4 	.word	0x200000a4
 800021c:	08005b30 	.word	0x08005b30

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96e 	b.w	80005c4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468c      	mov	ip, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8083 	bne.w	8000416 <__udivmoddi4+0x116>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d947      	bls.n	80003a6 <__udivmoddi4+0xa6>
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	b142      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031c:	f1c2 0020 	rsb	r0, r2, #32
 8000320:	fa24 f000 	lsr.w	r0, r4, r0
 8000324:	4091      	lsls	r1, r2
 8000326:	4097      	lsls	r7, r2
 8000328:	ea40 0c01 	orr.w	ip, r0, r1
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbbc f6f8 	udiv	r6, ip, r8
 8000338:	fa1f fe87 	uxth.w	lr, r7
 800033c:	fb08 c116 	mls	r1, r8, r6, ip
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb06 f10e 	mul.w	r1, r6, lr
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000352:	f080 8119 	bcs.w	8000588 <__udivmoddi4+0x288>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8116 	bls.w	8000588 <__udivmoddi4+0x288>
 800035c:	3e02      	subs	r6, #2
 800035e:	443b      	add	r3, r7
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8105 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f240 8102 	bls.w	800058c <__udivmoddi4+0x28c>
 8000388:	3802      	subs	r0, #2
 800038a:	443c      	add	r4, r7
 800038c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	b902      	cbnz	r2, 80003aa <__udivmoddi4+0xaa>
 80003a8:	deff      	udf	#255	; 0xff
 80003aa:	fab2 f282 	clz	r2, r2
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d150      	bne.n	8000454 <__udivmoddi4+0x154>
 80003b2:	1bcb      	subs	r3, r1, r7
 80003b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	2601      	movs	r6, #1
 80003be:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c2:	0c21      	lsrs	r1, r4, #16
 80003c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb08 f30c 	mul.w	r3, r8, ip
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0xe4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0xe2>
 80003dc:	428b      	cmp	r3, r1
 80003de:	f200 80e9 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1ac9      	subs	r1, r1, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x10c>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x10a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80d9 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e7bf      	b.n	8000396 <__udivmoddi4+0x96>
 8000416:	428b      	cmp	r3, r1
 8000418:	d909      	bls.n	800042e <__udivmoddi4+0x12e>
 800041a:	2d00      	cmp	r5, #0
 800041c:	f000 80b1 	beq.w	8000582 <__udivmoddi4+0x282>
 8000420:	2600      	movs	r6, #0
 8000422:	e9c5 0100 	strd	r0, r1, [r5]
 8000426:	4630      	mov	r0, r6
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	fab3 f683 	clz	r6, r3
 8000432:	2e00      	cmp	r6, #0
 8000434:	d14a      	bne.n	80004cc <__udivmoddi4+0x1cc>
 8000436:	428b      	cmp	r3, r1
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0x140>
 800043a:	4282      	cmp	r2, r0
 800043c:	f200 80b8 	bhi.w	80005b0 <__udivmoddi4+0x2b0>
 8000440:	1a84      	subs	r4, r0, r2
 8000442:	eb61 0103 	sbc.w	r1, r1, r3
 8000446:	2001      	movs	r0, #1
 8000448:	468c      	mov	ip, r1
 800044a:	2d00      	cmp	r5, #0
 800044c:	d0a8      	beq.n	80003a0 <__udivmoddi4+0xa0>
 800044e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f603 	lsr.w	r6, r0, r3
 800045c:	4097      	lsls	r7, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000466:	40d9      	lsrs	r1, r3
 8000468:	4330      	orrs	r0, r6
 800046a:	0c03      	lsrs	r3, r0, #16
 800046c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000470:	fa1f f887 	uxth.w	r8, r7
 8000474:	fb0e 1116 	mls	r1, lr, r6, r1
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb06 f108 	mul.w	r1, r6, r8
 8000480:	4299      	cmp	r1, r3
 8000482:	fa04 f402 	lsl.w	r4, r4, r2
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x19c>
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	f106 3cff 	add.w	ip, r6, #4294967295
 800048e:	f080 808d 	bcs.w	80005ac <__udivmoddi4+0x2ac>
 8000492:	4299      	cmp	r1, r3
 8000494:	f240 808a 	bls.w	80005ac <__udivmoddi4+0x2ac>
 8000498:	3e02      	subs	r6, #2
 800049a:	443b      	add	r3, r7
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b281      	uxth	r1, r0
 80004a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb00 f308 	mul.w	r3, r0, r8
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x1c4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ba:	d273      	bcs.n	80005a4 <__udivmoddi4+0x2a4>
 80004bc:	428b      	cmp	r3, r1
 80004be:	d971      	bls.n	80005a4 <__udivmoddi4+0x2a4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4439      	add	r1, r7
 80004c4:	1acb      	subs	r3, r1, r3
 80004c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ca:	e778      	b.n	80003be <__udivmoddi4+0xbe>
 80004cc:	f1c6 0c20 	rsb	ip, r6, #32
 80004d0:	fa03 f406 	lsl.w	r4, r3, r6
 80004d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004d8:	431c      	orrs	r4, r3
 80004da:	fa20 f70c 	lsr.w	r7, r0, ip
 80004de:	fa01 f306 	lsl.w	r3, r1, r6
 80004e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ea:	431f      	orrs	r7, r3
 80004ec:	0c3b      	lsrs	r3, r7, #16
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fa1f f884 	uxth.w	r8, r4
 80004f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000502:	458a      	cmp	sl, r1
 8000504:	fa02 f206 	lsl.w	r2, r2, r6
 8000508:	fa00 f306 	lsl.w	r3, r0, r6
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x220>
 800050e:	1861      	adds	r1, r4, r1
 8000510:	f109 30ff 	add.w	r0, r9, #4294967295
 8000514:	d248      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 8000516:	458a      	cmp	sl, r1
 8000518:	d946      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800051a:	f1a9 0902 	sub.w	r9, r9, #2
 800051e:	4421      	add	r1, r4
 8000520:	eba1 010a 	sub.w	r1, r1, sl
 8000524:	b2bf      	uxth	r7, r7
 8000526:	fbb1 f0fe 	udiv	r0, r1, lr
 800052a:	fb0e 1110 	mls	r1, lr, r0, r1
 800052e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000532:	fb00 f808 	mul.w	r8, r0, r8
 8000536:	45b8      	cmp	r8, r7
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x24a>
 800053a:	19e7      	adds	r7, r4, r7
 800053c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000540:	d22e      	bcs.n	80005a0 <__udivmoddi4+0x2a0>
 8000542:	45b8      	cmp	r8, r7
 8000544:	d92c      	bls.n	80005a0 <__udivmoddi4+0x2a0>
 8000546:	3802      	subs	r0, #2
 8000548:	4427      	add	r7, r4
 800054a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800054e:	eba7 0708 	sub.w	r7, r7, r8
 8000552:	fba0 8902 	umull	r8, r9, r0, r2
 8000556:	454f      	cmp	r7, r9
 8000558:	46c6      	mov	lr, r8
 800055a:	4649      	mov	r1, r9
 800055c:	d31a      	bcc.n	8000594 <__udivmoddi4+0x294>
 800055e:	d017      	beq.n	8000590 <__udivmoddi4+0x290>
 8000560:	b15d      	cbz	r5, 800057a <__udivmoddi4+0x27a>
 8000562:	ebb3 020e 	subs.w	r2, r3, lr
 8000566:	eb67 0701 	sbc.w	r7, r7, r1
 800056a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800056e:	40f2      	lsrs	r2, r6
 8000570:	ea4c 0202 	orr.w	r2, ip, r2
 8000574:	40f7      	lsrs	r7, r6
 8000576:	e9c5 2700 	strd	r2, r7, [r5]
 800057a:	2600      	movs	r6, #0
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e70b      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0x60>
 800058c:	4618      	mov	r0, r3
 800058e:	e6fd      	b.n	800038c <__udivmoddi4+0x8c>
 8000590:	4543      	cmp	r3, r8
 8000592:	d2e5      	bcs.n	8000560 <__udivmoddi4+0x260>
 8000594:	ebb8 0e02 	subs.w	lr, r8, r2
 8000598:	eb69 0104 	sbc.w	r1, r9, r4
 800059c:	3801      	subs	r0, #1
 800059e:	e7df      	b.n	8000560 <__udivmoddi4+0x260>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e7d2      	b.n	800054a <__udivmoddi4+0x24a>
 80005a4:	4660      	mov	r0, ip
 80005a6:	e78d      	b.n	80004c4 <__udivmoddi4+0x1c4>
 80005a8:	4681      	mov	r9, r0
 80005aa:	e7b9      	b.n	8000520 <__udivmoddi4+0x220>
 80005ac:	4666      	mov	r6, ip
 80005ae:	e775      	b.n	800049c <__udivmoddi4+0x19c>
 80005b0:	4630      	mov	r0, r6
 80005b2:	e74a      	b.n	800044a <__udivmoddi4+0x14a>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	4439      	add	r1, r7
 80005ba:	e713      	b.n	80003e4 <__udivmoddi4+0xe4>
 80005bc:	3802      	subs	r0, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e724      	b.n	800040c <__udivmoddi4+0x10c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <cs_sel>:
static void MX_GPIO_Init(void);
static void MX_LPUART1_UART_Init(void);
static void MX_UART4_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
void cs_sel() {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //CS LOW
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d2:	4802      	ldr	r0, [pc, #8]	; (80005dc <cs_sel+0x14>)
 80005d4:	f002 f8a8 	bl	8002728 <HAL_GPIO_WritePin>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	48000400 	.word	0x48000400

080005e0 <cs_desel>:

void cs_desel() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); //CS HIGH
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ea:	4802      	ldr	r0, [pc, #8]	; (80005f4 <cs_desel+0x14>)
 80005ec:	f002 f89c 	bl	8002728 <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	48000400 	.word	0x48000400

080005f8 <spi_rb>:

uint8_t spi_rb(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi2, &rbuf, 1, 0xFFFFFFFF);
 80005fe:	1df9      	adds	r1, r7, #7
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2201      	movs	r2, #1
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <spi_rb+0x20>)
 8000608:	f003 fb17 	bl	8003c3a <HAL_SPI_Receive>
	return rbuf;
 800060c:	79fb      	ldrb	r3, [r7, #7]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000ec 	.word	0x200000ec

0800061c <spi_wb>:

void spi_wb(uint8_t b) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &b, 1, 0xFFFFFFFF);
 8000626:	1df9      	adds	r1, r7, #7
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	2201      	movs	r2, #1
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <spi_wb+0x20>)
 8000630:	f003 f995 	bl	800395e <HAL_SPI_Transmit>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000ec 	.word	0x200000ec

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b0a2      	sub	sp, #136	; 0x88
 8000644:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t retVal, sockStatus;
	  int16_t rcvLen;
	  uint8_t rcvBuf[20], bufSize[] = {2, 2, 2, 2};
 8000646:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 800064a:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f001 fd47 	bl	80020de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f930 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 fa6c 	bl	8000b30 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000658:	f000 f996 	bl	8000988 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 800065c:	f000 f9de 	bl	8000a1c <MX_UART4_Init>
  MX_SPI2_Init();
 8000660:	f000 fa28 	bl	8000ab4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8000664:	4984      	ldr	r1, [pc, #528]	; (8000878 <main+0x238>)
 8000666:	4885      	ldr	r0, [pc, #532]	; (800087c <main+0x23c>)
 8000668:	f001 fb66 	bl	8001d38 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 800066c:	4984      	ldr	r1, [pc, #528]	; (8000880 <main+0x240>)
 800066e:	4885      	ldr	r0, [pc, #532]	; (8000884 <main+0x244>)
 8000670:	f001 fb88 	bl	8001d84 <reg_wizchip_spi_cbfunc>

    wizchip_init(bufSize, bufSize);
 8000674:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000678:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fbf8 	bl	8001e74 <wizchip_init>
    wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	f8c3 2013 	str.w	r2, [r3, #19]
 8000698:	4a7b      	ldr	r2, [pc, #492]	; (8000888 <main+0x248>)
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a2:	6018      	str	r0, [r3, #0]
 80006a4:	3304      	adds	r3, #4
 80006a6:	8019      	strh	r1, [r3, #0]
 80006a8:	4a78      	ldr	r2, [pc, #480]	; (800088c <main+0x24c>)
 80006aa:	f107 030e 	add.w	r3, r7, #14
 80006ae:	6810      	ldr	r0, [r2, #0]
 80006b0:	6018      	str	r0, [r3, #0]
 80006b2:	4a77      	ldr	r2, [pc, #476]	; (8000890 <main+0x250>)
 80006b4:	f107 0312 	add.w	r3, r7, #18
 80006b8:	6810      	ldr	r0, [r2, #0]
 80006ba:	6018      	str	r0, [r3, #0]
 80006bc:	4a75      	ldr	r2, [pc, #468]	; (8000894 <main+0x254>)
 80006be:	f107 0316 	add.w	r3, r7, #22
 80006c2:	6810      	ldr	r0, [r2, #0]
 80006c4:	6018      	str	r0, [r3, #0]
                            .ip 	= {192, 168, 2, 192},					// IP address
                            .sn 	= {255, 255, 255, 0},					// Subnet mask
                            .gw 	= {192, 168, 2, 1}};					// Gateway address
    wizchip_setnetinfo(&netInfo);
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fc5e 	bl	8001f8c <wizchip_setnetinfo>
    wizchip_getnetinfo(&netInfo);
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fc99 	bl	800200c <wizchip_getnetinfo>


  reconnect:
    /* Open socket 0 as TCP_SOCKET with port 5000 */
    if((retVal = socket(0, Sn_MR_UDP, 5000, 0)) == 0) {
 80006da:	2300      	movs	r3, #0
 80006dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80006e0:	2102      	movs	r1, #2
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 fad2 	bl	8000c8c <socket>
 80006e8:	4603      	mov	r3, r0
 80006ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80006ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	f040 80a4 	bne.w	8000840 <main+0x200>
  	  /* Put socket in LISTEN mode. This means we are creating a TCP server */
  	  if((retVal = listen(0)) == SOCK_OK) {
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fc4b 	bl	8000f94 <listen>
 80006fe:	4603      	mov	r3, r0
 8000700:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000704:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000708:	2b01      	cmp	r3, #1
 800070a:	f040 8092 	bne.w	8000832 <main+0x1f2>
  		  /* While socket is in LISTEN mode we wait for a remote connection */
  		  while(sockStatus = getSn_SR(0) == SOCK_LISTEN)
 800070e:	e002      	b.n	8000716 <main+0xd6>
  			  HAL_Delay(100);
 8000710:	2064      	movs	r0, #100	; 0x64
 8000712:	f001 fd55 	bl	80021c0 <HAL_Delay>
  		  while(sockStatus = getSn_SR(0) == SOCK_LISTEN)
 8000716:	f44f 7042 	mov.w	r0, #776	; 0x308
 800071a:	f001 f875 	bl	8001808 <WIZCHIP_READ>
 800071e:	4603      	mov	r3, r0
 8000720:	2b14      	cmp	r3, #20
 8000722:	bf0c      	ite	eq
 8000724:	2301      	moveq	r3, #1
 8000726:	2300      	movne	r3, #0
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800072e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1ec      	bne.n	8000710 <main+0xd0>
  		  /* OK. Got a remote peer. Let's send a message to it */
  		  while(1) {
  			  /* If connection is ESTABLISHED with remote peer */
  			  if(sockStatus = getSn_SR(0) == SOCK_ESTABLISHED) {
 8000736:	f44f 7042 	mov.w	r0, #776	; 0x308
 800073a:	f001 f865 	bl	8001808 <WIZCHIP_READ>
 800073e:	4603      	mov	r3, r0
 8000740:	2b17      	cmp	r3, #23
 8000742:	bf0c      	ite	eq
 8000744:	2301      	moveq	r3, #1
 8000746:	2300      	movne	r3, #0
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800074e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000752:	2b00      	cmp	r3, #0
 8000754:	d057      	beq.n	8000806 <main+0x1c6>
  				  uint8_t remoteIP[4];
  				  uint16_t remotePort;
  				  /* Retrieving remote peer IP and port number */
  				  getsockopt(0, SO_DESTIP, remoteIP);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	461a      	mov	r2, r3
 800075a:	2104      	movs	r1, #4
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fde3 	bl	8001328 <getsockopt>
  				  getsockopt(0, SO_DESTPORT, (uint8_t*)&remotePort);
 8000762:	1cbb      	adds	r3, r7, #2
 8000764:	461a      	mov	r2, r3
 8000766:	2105      	movs	r1, #5
 8000768:	2000      	movs	r0, #0
 800076a:	f000 fddd 	bl	8001328 <getsockopt>
  				  sprintf(msg, CONN_ESTABLISHED_MSG, remoteIP[0], remoteIP[1], remoteIP[2], remoteIP[3], remotePort);
 800076e:	793b      	ldrb	r3, [r7, #4]
 8000770:	461c      	mov	r4, r3
 8000772:	797b      	ldrb	r3, [r7, #5]
 8000774:	461d      	mov	r5, r3
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	79fa      	ldrb	r2, [r7, #7]
 800077a:	8879      	ldrh	r1, [r7, #2]
 800077c:	f107 0020 	add.w	r0, r7, #32
 8000780:	9102      	str	r1, [sp, #8]
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	462b      	mov	r3, r5
 8000788:	4622      	mov	r2, r4
 800078a:	4943      	ldr	r1, [pc, #268]	; (8000898 <main+0x258>)
 800078c:	f004 fda2 	bl	80052d4 <siprintf>
  				  HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), 100);
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fd43 	bl	8000220 <strlen>
 800079a:	4603      	mov	r3, r0
 800079c:	b29a      	uxth	r2, r3
 800079e:	f107 0120 	add.w	r1, r7, #32
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	483d      	ldr	r0, [pc, #244]	; (800089c <main+0x25c>)
 80007a6:	f003 ff93 	bl	80046d0 <HAL_UART_Transmit>
  				  /* Let's send a welcome message and closing socket */
  				  if(retVal = send(0, GREETING_MSG, strlen(GREETING_MSG)) == (int16_t)strlen(GREETING_MSG))
 80007aa:	2207      	movs	r2, #7
 80007ac:	493c      	ldr	r1, [pc, #240]	; (80008a0 <main+0x260>)
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 fcc0 	bl	8001134 <send>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b07      	cmp	r3, #7
 80007b8:	bf0c      	ite	eq
 80007ba:	2301      	moveq	r3, #1
 80007bc:	2300      	movne	r3, #0
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80007c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d006      	beq.n	80007da <main+0x19a>
  					HAL_UART_Transmit(&huart4, (uint8_t*)SENT_MESSAGE_MSG, strlen(SENT_MESSAGE_MSG), 100);
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2210      	movs	r2, #16
 80007d0:	4934      	ldr	r1, [pc, #208]	; (80008a4 <main+0x264>)
 80007d2:	4832      	ldr	r0, [pc, #200]	; (800089c <main+0x25c>)
 80007d4:	f003 ff7c 	bl	80046d0 <HAL_UART_Transmit>
  				  else { /* Ops: something went wrong during data transfer */
  					  sprintf(msg, WRONG_RETVAL_MSG, retVal);
  					  HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), 100);
  				  }
  				  break;
 80007d8:	e047      	b.n	800086a <main+0x22a>
  					  sprintf(msg, WRONG_RETVAL_MSG, retVal);
 80007da:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4931      	ldr	r1, [pc, #196]	; (80008a8 <main+0x268>)
 80007e4:	4618      	mov	r0, r3
 80007e6:	f004 fd75 	bl	80052d4 <siprintf>
  					  HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), 100);
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fd16 	bl	8000220 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f107 0120 	add.w	r1, r7, #32
 80007fc:	2364      	movs	r3, #100	; 0x64
 80007fe:	4827      	ldr	r0, [pc, #156]	; (800089c <main+0x25c>)
 8000800:	f003 ff66 	bl	80046d0 <HAL_UART_Transmit>
  				  break;
 8000804:	e031      	b.n	800086a <main+0x22a>
  			  }
  			  else { /* Something went wrong with remote peer, maybe the connection was closed unexpectedly */
  				  sprintf(msg, WRONG_STATUS_MSG, sockStatus);
 8000806:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	4927      	ldr	r1, [pc, #156]	; (80008ac <main+0x26c>)
 8000810:	4618      	mov	r0, r3
 8000812:	f004 fd5f 	bl	80052d4 <siprintf>
  				  HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), 100);
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fd00 	bl	8000220 <strlen>
 8000820:	4603      	mov	r3, r0
 8000822:	b29a      	uxth	r2, r3
 8000824:	f107 0120 	add.w	r1, r7, #32
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	481c      	ldr	r0, [pc, #112]	; (800089c <main+0x25c>)
 800082c:	f003 ff50 	bl	80046d0 <HAL_UART_Transmit>
  				  break;
 8000830:	e01b      	b.n	800086a <main+0x22a>
  			  }
  		  }

  	  } else /* Ops: socket not in LISTEN mode. Something went wrong */
  		  PRINT_STR(LISTEN_ERR_MSG);
 8000832:	2364      	movs	r3, #100	; 0x64
 8000834:	220f      	movs	r2, #15
 8000836:	491e      	ldr	r1, [pc, #120]	; (80008b0 <main+0x270>)
 8000838:	4818      	ldr	r0, [pc, #96]	; (800089c <main+0x25c>)
 800083a:	f003 ff49 	bl	80046d0 <HAL_UART_Transmit>
 800083e:	e014      	b.n	800086a <main+0x22a>
    } else { /* Can't open the socket. This means something is wrong with W5100 configuration: maybe SPI issue? */
  	  sprintf(msg, WRONG_RETVAL_MSG, retVal);
 8000840:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4917      	ldr	r1, [pc, #92]	; (80008a8 <main+0x268>)
 800084a:	4618      	mov	r0, r3
 800084c:	f004 fd42 	bl	80052d4 <siprintf>
  	  HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), 100);
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fce3 	bl	8000220 <strlen>
 800085a:	4603      	mov	r3, r0
 800085c:	b29a      	uxth	r2, r3
 800085e:	f107 0120 	add.w	r1, r7, #32
 8000862:	2364      	movs	r3, #100	; 0x64
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <main+0x25c>)
 8000866:	f003 ff33 	bl	80046d0 <HAL_UART_Transmit>
    }

    /* We close the socket and start a connection again */
    disconnect(0);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fbec 	bl	8001048 <disconnect>
    close(0);
 8000870:	2000      	movs	r0, #0
 8000872:	f000 fb21 	bl	8000eb8 <close>
    goto reconnect;
 8000876:	e730      	b.n	80006da <main+0x9a>
 8000878:	080005e1 	.word	0x080005e1
 800087c:	080005c9 	.word	0x080005c9
 8000880:	0800061d 	.word	0x0800061d
 8000884:	080005f9 	.word	0x080005f9
 8000888:	08005bfc 	.word	0x08005bfc
 800088c:	08005c04 	.word	0x08005c04
 8000890:	08005c08 	.word	0x08005c08
 8000894:	08005c0c 	.word	0x08005c0c
 8000898:	08005b48 	.word	0x08005b48
 800089c:	200001e0 	.word	0x200001e0
 80008a0:	08005b80 	.word	0x08005b80
 80008a4:	08005b88 	.word	0x08005b88
 80008a8:	08005b9c 	.word	0x08005b9c
 80008ac:	08005bc8 	.word	0x08005bc8
 80008b0:	08005bec 	.word	0x08005bec

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0a8      	sub	sp, #160	; 0xa0
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008be:	2238      	movs	r2, #56	; 0x38
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f004 fcfe 	bl	80052c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d8:	463b      	mov	r3, r7
 80008da:	2254      	movs	r2, #84	; 0x54
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 fcf0 	bl	80052c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f001 ff5b 	bl	80027a0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ea:	2302      	movs	r3, #2
 80008ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2340      	movs	r3, #64	; 0x40
 80008f6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fe:	2302      	movs	r3, #2
 8000900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000904:	2304      	movs	r3, #4
 8000906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800090a:	2355      	movs	r3, #85	; 0x55
 800090c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000926:	4618      	mov	r0, r3
 8000928:	f001 ffee 	bl	8002908 <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000932:	f000 f9a5 	bl	8000c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2303      	movs	r3, #3
 800093c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800094a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800094e:	2104      	movs	r1, #4
 8000950:	4618      	mov	r0, r3
 8000952:	f002 faf1 	bl	8002f38 <HAL_RCC_ClockConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800095c:	f000 f990 	bl	8000c80 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPUART1;
 8000960:	2328      	movs	r3, #40	; 0x28
 8000962:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4618      	mov	r0, r3
 8000970:	f002 fcfe 	bl	8003370 <HAL_RCCEx_PeriphCLKConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800097a:	f000 f981 	bl	8000c80 <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	37a0      	adds	r7, #160	; 0xa0
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 800098e:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 8000990:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 80009cc:	f003 fe30 	bl	8004630 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 f953 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009da:	2100      	movs	r1, #0
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 80009de:	f004 fb7d 	bl	80050dc <HAL_UARTEx_SetTxFifoThreshold>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80009e8:	f000 f94a 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ec:	2100      	movs	r1, #0
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 80009f0:	f004 fbb2 	bl	8005158 <HAL_UARTEx_SetRxFifoThreshold>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80009fa:	f000 f941 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 8000a00:	f004 fb33 	bl	800506a <HAL_UARTEx_DisableFifoMode>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a0a:	f000 f939 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000150 	.word	0x20000150
 8000a18:	40008000 	.word	0x40008000

08000a1c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_UART4_Init+0x90>)
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <MX_UART4_Init+0x94>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_UART4_Init+0x90>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_UART4_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_UART4_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_UART4_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_UART4_Init+0x90>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_UART4_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_UART4_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_UART4_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_UART4_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_UART4_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a64:	4811      	ldr	r0, [pc, #68]	; (8000aac <MX_UART4_Init+0x90>)
 8000a66:	f003 fde3 	bl	8004630 <HAL_UART_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a70:	f000 f906 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a74:	2100      	movs	r1, #0
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_UART4_Init+0x90>)
 8000a78:	f004 fb30 	bl	80050dc <HAL_UARTEx_SetTxFifoThreshold>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a82:	f000 f8fd 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4808      	ldr	r0, [pc, #32]	; (8000aac <MX_UART4_Init+0x90>)
 8000a8a:	f004 fb65 	bl	8005158 <HAL_UARTEx_SetRxFifoThreshold>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a94:	f000 f8f4 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_UART4_Init+0x90>)
 8000a9a:	f004 fae6 	bl	800506a <HAL_UARTEx_DisableFifoMode>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000aa4:	f000 f8ec 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200001e0 	.word	0x200001e0
 8000ab0:	40004c00 	.word	0x40004c00

08000ab4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000aba:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <MX_SPI2_Init+0x78>)
 8000abc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000ace:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ad2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000aea:	2208      	movs	r2, #8
 8000aec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000b02:	2207      	movs	r2, #7
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000b0e:	2208      	movs	r2, #8
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_SPI2_Init+0x74>)
 8000b14:	f002 fe78 	bl	8003808 <HAL_SPI_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b1e:	f000 f8af 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000ec 	.word	0x200000ec
 8000b2c:	40003800 	.word	0x40003800

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b49      	ldr	r3, [pc, #292]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a48      	ldr	r2, [pc, #288]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b46      	ldr	r3, [pc, #280]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a42      	ldr	r2, [pc, #264]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b40      	ldr	r3, [pc, #256]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a3c      	ldr	r2, [pc, #240]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba6:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a30      	ldr	r2, [pc, #192]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000bac:	f043 0308 	orr.w	r3, r3, #8
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f001 fdaf 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd0:	4827      	ldr	r0, [pc, #156]	; (8000c70 <MX_GPIO_Init+0x140>)
 8000bd2:	f001 fda9 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2104      	movs	r1, #4
 8000bda:	4826      	ldr	r0, [pc, #152]	; (8000c74 <MX_GPIO_Init+0x144>)
 8000bdc:	f001 fda4 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be6:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <MX_GPIO_Init+0x148>)
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4821      	ldr	r0, [pc, #132]	; (8000c7c <MX_GPIO_Init+0x14c>)
 8000bf6:	f001 fc15 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	f001 fc06 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480f      	ldr	r0, [pc, #60]	; (8000c70 <MX_GPIO_Init+0x140>)
 8000c32:	f001 fbf7 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c36:	2304      	movs	r3, #4
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4809      	ldr	r0, [pc, #36]	; (8000c74 <MX_GPIO_Init+0x144>)
 8000c4e:	f001 fbe9 	bl	8002424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2028      	movs	r0, #40	; 0x28
 8000c58:	f001 fbaf 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c5c:	2028      	movs	r0, #40	; 0x28
 8000c5e:	f001 fbc6 	bl	80023ee <HAL_NVIC_EnableIRQ>

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	; 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	48000400 	.word	0x48000400
 8000c74:	48000c00 	.word	0x48000c00
 8000c78:	10110000 	.word	0x10110000
 8000c7c:	48000800 	.word	0x48000800

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71bb      	strb	r3, [r7, #6]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	80bb      	strh	r3, [r7, #4]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b08      	cmp	r3, #8
 8000cae:	d902      	bls.n	8000cb6 <socket+0x2a>
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	e0f2      	b.n	8000e9c <socket+0x210>
	switch(protocol)
 8000cb6:	79bb      	ldrb	r3, [r7, #6]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d005      	beq.n	8000cc8 <socket+0x3c>
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	dd11      	ble.n	8000ce4 <socket+0x58>
 8000cc0:	3b02      	subs	r3, #2
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d80e      	bhi.n	8000ce4 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000cc6:	e011      	b.n	8000cec <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2204      	movs	r2, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000cd4:	f000 fe32 	bl	800193c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d105      	bne.n	8000cea <socket+0x5e>
 8000cde:	f06f 0302 	mvn.w	r3, #2
 8000ce2:	e0db      	b.n	8000e9c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000ce4:	f06f 0304 	mvn.w	r3, #4
 8000ce8:	e0d8      	b.n	8000e9c <socket+0x210>
	    break;
 8000cea:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <socket+0x70>
 8000cf6:	f06f 0305 	mvn.w	r3, #5
 8000cfa:	e0cf      	b.n	8000e9c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d025      	beq.n	8000d4e <socket+0xc2>
	{
   	switch(protocol)
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d002      	beq.n	8000d0e <socket+0x82>
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d008      	beq.n	8000d1e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000d0c:	e024      	b.n	8000d58 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d11c      	bne.n	8000d52 <socket+0xc6>
 8000d18:	f06f 0305 	mvn.w	r3, #5
 8000d1c:	e0be      	b.n	8000e9c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	f003 0320 	and.w	r3, r3, #32
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db02      	blt.n	8000d36 <socket+0xaa>
 8000d30:	f06f 0305 	mvn.w	r3, #5
 8000d34:	e0b2      	b.n	8000e9c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	f003 0310 	and.w	r3, r3, #16
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d00a      	beq.n	8000d56 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db06      	blt.n	8000d56 <socket+0xca>
 8000d48:	f06f 0305 	mvn.w	r3, #5
 8000d4c:	e0a6      	b.n	8000e9c <socket+0x210>
   	}
   }
 8000d4e:	bf00      	nop
 8000d50:	e002      	b.n	8000d58 <socket+0xcc>
   	      break;
 8000d52:	bf00      	nop
 8000d54:	e000      	b.n	8000d58 <socket+0xcc>
   	      break;
 8000d56:	bf00      	nop
	close(sn);
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f8ac 	bl	8000eb8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	3301      	adds	r3, #1
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d6e:	f023 030f 	bic.w	r3, r3, #15
 8000d72:	b25a      	sxtb	r2, r3
 8000d74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f000 fd8e 	bl	80018a0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000d84:	88bb      	ldrh	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d110      	bne.n	8000dac <socket+0x120>
	{
	   port = sock_any_port++;
 8000d8a:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <socket+0x218>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	b291      	uxth	r1, r2
 8000d92:	4a44      	ldr	r2, [pc, #272]	; (8000ea4 <socket+0x218>)
 8000d94:	8011      	strh	r1, [r2, #0]
 8000d96:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000d98:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <socket+0x218>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d103      	bne.n	8000dac <socket+0x120>
 8000da4:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <socket+0x218>)
 8000da6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000daa:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	3301      	adds	r3, #1
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000db8:	461a      	mov	r2, r3
 8000dba:	88bb      	ldrh	r3, [r7, #4]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	f000 fd6b 	bl	80018a0 <WIZCHIP_WRITE>
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	3301      	adds	r3, #1
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	88bb      	ldrh	r3, [r7, #4]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4610      	mov	r0, r2
 8000de0:	f000 fd5e 	bl	80018a0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	3301      	adds	r3, #1
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000df0:	2101      	movs	r1, #1
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fd54 	bl	80018a0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000df8:	bf00      	nop
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	3301      	adds	r3, #1
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fcfe 	bl	8001808 <WIZCHIP_READ>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f3      	bne.n	8000dfa <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2201      	movs	r2, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <socket+0x21c>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	4013      	ands	r3, r2
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <socket+0x21c>)
 8000e2e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	f003 0201 	and.w	r2, r3, #1
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <socket+0x21c>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <socket+0x21c>)
 8000e4c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2201      	movs	r2, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <socket+0x220>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4013      	ands	r3, r2
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <socket+0x220>)
 8000e6a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <socket+0x224>)
 8000e70:	2100      	movs	r1, #0
 8000e72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <socket+0x228>)
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000e7e:	bf00      	nop
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	3301      	adds	r3, #1
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fcbb 	bl	8001808 <WIZCHIP_READ>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f3      	beq.n	8000e80 <socket+0x1f4>
   return (int8_t)sn;
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	200000bc 	.word	0x200000bc
 8000eac:	200000be 	.word	0x200000be
 8000eb0:	200000c0 	.word	0x200000c0
 8000eb4:	200000d0 	.word	0x200000d0

08000eb8 <close>:

int8_t close(uint8_t sn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b08      	cmp	r3, #8
 8000ec6:	d902      	bls.n	8000ece <close+0x16>
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	e055      	b.n	8000f7a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000eda:	2110      	movs	r1, #16
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fcdf 	bl	80018a0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000ee2:	bf00      	nop
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	3301      	adds	r3, #1
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 fc89 	bl	8001808 <WIZCHIP_READ>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f3      	bne.n	8000ee4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	3301      	adds	r3, #1
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f08:	211f      	movs	r1, #31
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fcc8 	bl	80018a0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2201      	movs	r2, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <close+0xcc>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	4013      	ands	r3, r2
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <close+0xcc>)
 8000f2c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2201      	movs	r2, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	b21a      	sxth	r2, r3
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <close+0xd0>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4013      	ands	r3, r2
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <close+0xd0>)
 8000f4a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <close+0xd4>)
 8000f50:	2100      	movs	r1, #0
 8000f52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <close+0xd8>)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000f5e:	bf00      	nop
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	3301      	adds	r3, #1
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fc4b 	bl	8001808 <WIZCHIP_READ>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f3      	bne.n	8000f60 <close+0xa8>
	return SOCK_OK;
 8000f78:	2301      	movs	r3, #1
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000bc 	.word	0x200000bc
 8000f88:	200000be 	.word	0x200000be
 8000f8c:	200000c0 	.word	0x200000c0
 8000f90:	200000d0 	.word	0x200000d0

08000f94 <listen>:

int8_t listen(uint8_t sn)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d902      	bls.n	8000faa <listen+0x16>
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	e049      	b.n	800103e <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	3301      	adds	r3, #1
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fc28 	bl	8001808 <WIZCHIP_READ>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d002      	beq.n	8000fc8 <listen+0x34>
 8000fc2:	f06f 0304 	mvn.w	r3, #4
 8000fc6:	e03a      	b.n	800103e <listen+0xaa>
	CHECK_SOCKINIT();
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	3301      	adds	r3, #1
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fc17 	bl	8001808 <WIZCHIP_READ>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b13      	cmp	r3, #19
 8000fde:	d002      	beq.n	8000fe6 <listen+0x52>
 8000fe0:	f06f 0302 	mvn.w	r3, #2
 8000fe4:	e02b      	b.n	800103e <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	3301      	adds	r3, #1
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fc53 	bl	80018a0 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000ffa:	bf00      	nop
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	3301      	adds	r3, #1
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001008:	4618      	mov	r0, r3
 800100a:	f000 fbfd 	bl	8001808 <WIZCHIP_READ>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f3      	bne.n	8000ffc <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001014:	e006      	b.n	8001024 <listen+0x90>
   {
         close(sn);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff4d 	bl	8000eb8 <close>
         return SOCKERR_SOCKCLOSED;
 800101e:	f06f 0303 	mvn.w	r3, #3
 8001022:	e00c      	b.n	800103e <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	3301      	adds	r3, #1
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fbe9 	bl	8001808 <WIZCHIP_READ>
 8001036:	4603      	mov	r3, r0
 8001038:	2b14      	cmp	r3, #20
 800103a:	d1ec      	bne.n	8001016 <listen+0x82>
   }
   return SOCK_OK;
 800103c:	2301      	movs	r3, #1
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b08      	cmp	r3, #8
 8001056:	d902      	bls.n	800105e <disconnect+0x16>
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	e062      	b.n	8001124 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	3301      	adds	r3, #1
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fbce 	bl	8001808 <WIZCHIP_READ>
 800106c:	4603      	mov	r3, r0
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	2b01      	cmp	r3, #1
 8001074:	d002      	beq.n	800107c <disconnect+0x34>
 8001076:	f06f 0304 	mvn.w	r3, #4
 800107a:	e053      	b.n	8001124 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	3301      	adds	r3, #1
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001088:	2108      	movs	r1, #8
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fc08 	bl	80018a0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001090:	bf00      	nop
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	3301      	adds	r3, #1
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fbb2 	bl	8001808 <WIZCHIP_READ>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f3      	bne.n	8001092 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2201      	movs	r2, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <disconnect+0xe4>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4013      	ands	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <disconnect+0xe4>)
 80010c6:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <disconnect+0xe8>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	fa42 f303 	asr.w	r3, r2, r3
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d016      	beq.n	800110a <disconnect+0xc2>
 80010dc:	2300      	movs	r3, #0
 80010de:	e021      	b.n	8001124 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	3301      	adds	r3, #1
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fb8b 	bl	8001808 <WIZCHIP_READ>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <disconnect+0xc2>
	   {
	      close(sn);
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff feda 	bl	8000eb8 <close>
	      return SOCKERR_TIMEOUT;
 8001104:	f06f 030c 	mvn.w	r3, #12
 8001108:	e00c      	b.n	8001124 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	3301      	adds	r3, #1
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fb76 	bl	8001808 <WIZCHIP_READ>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1de      	bne.n	80010e0 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200000be 	.word	0x200000be
 8001130:	200000bc 	.word	0x200000bc

08001134 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001148:	2300      	movs	r3, #0
 800114a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b08      	cmp	r3, #8
 8001150:	d902      	bls.n	8001158 <send+0x24>
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e0de      	b.n	8001316 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	3301      	adds	r3, #1
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fb51 	bl	8001808 <WIZCHIP_READ>
 8001166:	4603      	mov	r3, r0
 8001168:	f003 030f 	and.w	r3, r3, #15
 800116c:	2b01      	cmp	r3, #1
 800116e:	d002      	beq.n	8001176 <send+0x42>
 8001170:	f06f 0304 	mvn.w	r3, #4
 8001174:	e0cf      	b.n	8001316 <send+0x1e2>
   CHECK_SOCKDATA();
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <send+0x4e>
 800117c:	f06f 030d 	mvn.w	r3, #13
 8001180:	e0c9      	b.n	8001316 <send+0x1e2>
   tmp = getSn_SR(sn);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	3301      	adds	r3, #1
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fb3a 	bl	8001808 <WIZCHIP_READ>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b17      	cmp	r3, #23
 800119c:	d005      	beq.n	80011aa <send+0x76>
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	2b1c      	cmp	r3, #28
 80011a2:	d002      	beq.n	80011aa <send+0x76>
 80011a4:	f06f 0306 	mvn.w	r3, #6
 80011a8:	e0b5      	b.n	8001316 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 80011aa:	4b5d      	ldr	r3, [pc, #372]	; (8001320 <send+0x1ec>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	fa42 f303 	asr.w	r3, r2, r3
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d039      	beq.n	8001232 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	3301      	adds	r3, #1
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fb1c 	bl	8001808 <WIZCHIP_READ>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f003 031f 	and.w	r3, r3, #31
 80011d6:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d019      	beq.n	8001216 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	3301      	adds	r3, #1
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011ee:	2110      	movs	r1, #16
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fb55 	bl	80018a0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2201      	movs	r2, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	b21b      	sxth	r3, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	b21a      	sxth	r2, r3
 8001204:	4b46      	ldr	r3, [pc, #280]	; (8001320 <send+0x1ec>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	b21b      	sxth	r3, r3
 800120a:	4013      	ands	r3, r2
 800120c:	b21b      	sxth	r3, r3
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b43      	ldr	r3, [pc, #268]	; (8001320 <send+0x1ec>)
 8001212:	801a      	strh	r2, [r3, #0]
 8001214:	e00d      	b.n	8001232 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <send+0xfa>
      {
         close(sn);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe48 	bl	8000eb8 <close>
         return SOCKERR_TIMEOUT;
 8001228:	f06f 030c 	mvn.w	r3, #12
 800122c:	e073      	b.n	8001316 <send+0x1e2>
      }
      else return SOCK_BUSY;
 800122e:	2300      	movs	r3, #0
 8001230:	e071      	b.n	8001316 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	3301      	adds	r3, #1
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fae2 	bl	8001808 <WIZCHIP_READ>
 8001244:	4603      	mov	r3, r0
 8001246:	b29b      	uxth	r3, r3
 8001248:	029b      	lsls	r3, r3, #10
 800124a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800124c:	88ba      	ldrh	r2, [r7, #4]
 800124e:	89bb      	ldrh	r3, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d901      	bls.n	8001258 <send+0x124>
 8001254:	89bb      	ldrh	r3, [r7, #12]
 8001256:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fc2e 	bl	8001abc <getSn_TX_FSR>
 8001260:	4603      	mov	r3, r0
 8001262:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	3301      	adds	r3, #1
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fac9 	bl	8001808 <WIZCHIP_READ>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b17      	cmp	r3, #23
 800127e:	d009      	beq.n	8001294 <send+0x160>
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b1c      	cmp	r3, #28
 8001284:	d006      	beq.n	8001294 <send+0x160>
      {
         close(sn);
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fe15 	bl	8000eb8 <close>
         return SOCKERR_SOCKSTATUS;
 800128e:	f06f 0306 	mvn.w	r3, #6
 8001292:	e040      	b.n	8001316 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <send+0x1f0>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	fa42 f303 	asr.w	r3, r2, r3
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <send+0x180>
 80012a8:	88ba      	ldrh	r2, [r7, #4]
 80012aa:	89bb      	ldrh	r3, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d901      	bls.n	80012b4 <send+0x180>
 80012b0:	2300      	movs	r3, #0
 80012b2:	e030      	b.n	8001316 <send+0x1e2>
      if(len <= freesize) break;
 80012b4:	88ba      	ldrh	r2, [r7, #4]
 80012b6:	89bb      	ldrh	r3, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d900      	bls.n	80012be <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80012bc:	e7cc      	b.n	8001258 <send+0x124>
      if(len <= freesize) break;
 80012be:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80012c0:	88ba      	ldrh	r2, [r7, #4]
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	6839      	ldr	r1, [r7, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fc8e 	bl	8001be8 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	3301      	adds	r3, #1
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012d8:	2120      	movs	r1, #32
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fae0 	bl	80018a0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80012e0:	bf00      	nop
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	3301      	adds	r3, #1
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fa8a 	bl	8001808 <WIZCHIP_READ>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f3      	bne.n	80012e2 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2201      	movs	r2, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	b21a      	sxth	r2, r3
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <send+0x1ec>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	b21b      	sxth	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b21b      	sxth	r3, r3
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <send+0x1ec>)
 8001312:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001314:	88bb      	ldrh	r3, [r7, #4]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200000be 	.word	0x200000be
 8001324:	200000bc 	.word	0x200000bc

08001328 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	603a      	str	r2, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	460b      	mov	r3, r1
 8001336:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2b08      	cmp	r3, #8
 800133c:	d902      	bls.n	8001344 <getsockopt+0x1c>
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e101      	b.n	8001548 <getsockopt+0x220>
   switch(sotype)
 8001344:	79bb      	ldrb	r3, [r7, #6]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	f200 80fa 	bhi.w	8001540 <getsockopt+0x218>
 800134c:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <getsockopt+0x2c>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001389 	.word	0x08001389
 8001358:	080013a5 	.word	0x080013a5
 800135c:	080013c1 	.word	0x080013c1
 8001360:	080013dd 	.word	0x080013dd
 8001364:	08001417 	.word	0x08001417
 8001368:	0800142f 	.word	0x0800142f
 800136c:	08001541 	.word	0x08001541
 8001370:	08001469 	.word	0x08001469
 8001374:	080014a3 	.word	0x080014a3
 8001378:	080014b5 	.word	0x080014b5
 800137c:	080014c7 	.word	0x080014c7
 8001380:	080014e3 	.word	0x080014e3
 8001384:	0800151b 	.word	0x0800151b
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	3301      	adds	r3, #1
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fa39 	bl	8001808 <WIZCHIP_READ>
 8001396:	4603      	mov	r3, r0
 8001398:	f023 030f 	bic.w	r3, r3, #15
 800139c:	b2da      	uxtb	r2, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	701a      	strb	r2, [r3, #0]
         break;
 80013a2:	e0d0      	b.n	8001546 <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	3301      	adds	r3, #1
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fa29 	bl	8001808 <WIZCHIP_READ>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	701a      	strb	r2, [r3, #0]
         break;
 80013be:	e0c2      	b.n	8001546 <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	3301      	adds	r3, #1
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fa1b 	bl	8001808 <WIZCHIP_READ>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	701a      	strb	r2, [r3, #0]
         break;
 80013da:	e0b4      	b.n	8001546 <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	3301      	adds	r3, #1
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fa0d 	bl	8001808 <WIZCHIP_READ>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b29c      	uxth	r4, r3
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	3301      	adds	r3, #1
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fa00 	bl	8001808 <WIZCHIP_READ>
 8001408:	4603      	mov	r3, r0
 800140a:	b29b      	uxth	r3, r3
 800140c:	4423      	add	r3, r4
 800140e:	b29a      	uxth	r2, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	801a      	strh	r2, [r3, #0]
         break;
 8001414:	e097      	b.n	8001546 <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	3301      	adds	r3, #1
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001422:	2204      	movs	r2, #4
 8001424:	6839      	ldr	r1, [r7, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fa88 	bl	800193c <WIZCHIP_READ_BUF>
         break;
 800142c:	e08b      	b.n	8001546 <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	3301      	adds	r3, #1
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f9e4 	bl	8001808 <WIZCHIP_READ>
 8001440:	4603      	mov	r3, r0
 8001442:	b29b      	uxth	r3, r3
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	b29c      	uxth	r4, r3
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	3301      	adds	r3, #1
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f9d7 	bl	8001808 <WIZCHIP_READ>
 800145a:	4603      	mov	r3, r0
 800145c:	b29b      	uxth	r3, r3
 800145e:	4423      	add	r3, r4
 8001460:	b29a      	uxth	r2, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	801a      	strh	r2, [r3, #0]
         break;
 8001466:	e06e      	b.n	8001546 <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	3301      	adds	r3, #1
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f9c9 	bl	8001808 <WIZCHIP_READ>
 8001476:	4603      	mov	r3, r0
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	2b01      	cmp	r3, #1
 800147e:	d002      	beq.n	8001486 <getsockopt+0x15e>
 8001480:	f06f 0304 	mvn.w	r3, #4
 8001484:	e060      	b.n	8001548 <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	3301      	adds	r3, #1
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f9b8 	bl	8001808 <WIZCHIP_READ>
 8001498:	4603      	mov	r3, r0
 800149a:	b29a      	uxth	r2, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	801a      	strh	r2, [r3, #0]
         break;
 80014a0:	e051      	b.n	8001546 <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fb09 	bl	8001abc <getSn_TX_FSR>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	801a      	strh	r2, [r3, #0]
         break;
 80014b2:	e048      	b.n	8001546 <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fb4b 	bl	8001b52 <getSn_RX_RSR>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	801a      	strh	r2, [r3, #0]
         break;
 80014c4:	e03f      	b.n	8001546 <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	3301      	adds	r3, #1
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f998 	bl	8001808 <WIZCHIP_READ>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	701a      	strb	r2, [r3, #0]
         break;
 80014e0:	e031      	b.n	8001546 <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	3301      	adds	r3, #1
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f98c 	bl	8001808 <WIZCHIP_READ>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fb28 	bl	8001b52 <getSn_RX_RSR>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 800150a:	e01c      	b.n	8001546 <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <getsockopt+0x228>)
 8001510:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	801a      	strh	r2, [r3, #0]
         break;
 8001518:	e015      	b.n	8001546 <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	3301      	adds	r3, #1
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f970 	bl	8001808 <WIZCHIP_READ>
 8001528:	4603      	mov	r3, r0
 800152a:	2b01      	cmp	r3, #1
 800152c:	d102      	bne.n	8001534 <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 800152e:	f06f 0304 	mvn.w	r3, #4
 8001532:	e009      	b.n	8001548 <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	4a07      	ldr	r2, [pc, #28]	; (8001554 <getsockopt+0x22c>)
 8001538:	5cd2      	ldrb	r2, [r2, r3]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	701a      	strb	r2, [r3, #0]
         break;
 800153e:	e002      	b.n	8001546 <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 8001540:	f06f 0301 	mvn.w	r3, #1
 8001544:	e000      	b.n	8001548 <getsockopt+0x220>
   }
   return SOCK_OK;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	200000c0 	.word	0x200000c0
 8001554:	200000d0 	.word	0x200000d0

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_MspInit+0x44>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_MspInit+0x44>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6613      	str	r3, [r2, #96]	; 0x60
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_MspInit+0x44>)
 800156c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_MspInit+0x44>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_MspInit+0x44>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6593      	str	r3, [r2, #88]	; 0x58
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_MspInit+0x44>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800158e:	f001 f9ab 	bl	80028e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a2f      	ldr	r2, [pc, #188]	; (800167c <HAL_UART_MspInit+0xdc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d129      	bne.n	8001616 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_UART_MspInit+0xe0>)
 80015c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c6:	4a2e      	ldr	r2, [pc, #184]	; (8001680 <HAL_UART_MspInit+0xe0>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	65d3      	str	r3, [r2, #92]	; 0x5c
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <HAL_UART_MspInit+0xe0>)
 80015d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <HAL_UART_MspInit+0xe0>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	4a28      	ldr	r2, [pc, #160]	; (8001680 <HAL_UART_MspInit+0xe0>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_UART_MspInit+0xe0>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80015f2:	230c      	movs	r3, #12
 80015f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001602:	230c      	movs	r3, #12
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001610:	f000 ff08 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001614:	e02d      	b.n	8001672 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==UART4)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1a      	ldr	r2, [pc, #104]	; (8001684 <HAL_UART_MspInit+0xe4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d128      	bne.n	8001672 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_UART_MspInit+0xe0>)
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001624:	4a16      	ldr	r2, [pc, #88]	; (8001680 <HAL_UART_MspInit+0xe0>)
 8001626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800162a:	6593      	str	r3, [r2, #88]	; 0x58
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_UART_MspInit+0xe0>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_UART_MspInit+0xe0>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_UART_MspInit+0xe0>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_UART_MspInit+0xe0>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001650:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001662:	2305      	movs	r3, #5
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <HAL_UART_MspInit+0xe8>)
 800166e:	f000 fed9 	bl	8002424 <HAL_GPIO_Init>
}
 8001672:	bf00      	nop
 8001674:	3730      	adds	r7, #48	; 0x30
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40008000 	.word	0x40008000
 8001680:	40021000 	.word	0x40021000
 8001684:	40004c00 	.word	0x40004c00
 8001688:	48000800 	.word	0x48000800

0800168c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a17      	ldr	r2, [pc, #92]	; (8001708 <HAL_SPI_MspInit+0x7c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d128      	bne.n	8001700 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_SPI_MspInit+0x80>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	4a16      	ldr	r2, [pc, #88]	; (800170c <HAL_SPI_MspInit+0x80>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_SPI_MspInit+0x80>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_SPI_MspInit+0x80>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a10      	ldr	r2, [pc, #64]	; (800170c <HAL_SPI_MspInit+0x80>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_SPI_MspInit+0x80>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016f0:	2305      	movs	r3, #5
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_SPI_MspInit+0x84>)
 80016fc:	f000 fe92 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3728      	adds	r7, #40	; 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40003800 	.word	0x40003800
 800170c:	40021000 	.word	0x40021000
 8001710:	48000400 	.word	0x48000400

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 fd10 	bl	8002184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800176c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001770:	f000 fff2 	bl	8002758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <_sbrk+0x5c>)
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <_sbrk+0x60>)
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <_sbrk+0x64>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <_sbrk+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d207      	bcs.n	80017b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a8:	f003 fd62 	bl	8005270 <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	e009      	b.n	80017cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20020000 	.word	0x20020000
 80017d8:	00000400 	.word	0x00000400
 80017dc:	200000d8 	.word	0x200000d8
 80017e0:	20000288 	.word	0x20000288

080017e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <WIZCHIP_READ+0x94>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <WIZCHIP_READ+0x94>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <WIZCHIP_READ+0x94>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <WIZCHIP_READ+0x24>
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <WIZCHIP_READ+0x94>)
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	2b00      	cmp	r3, #0
 800182a:	d114      	bne.n	8001856 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <WIZCHIP_READ+0x94>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	0c12      	lsrs	r2, r2, #16
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	4610      	mov	r0, r2
 8001838:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <WIZCHIP_READ+0x94>)
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	0a12      	lsrs	r2, r2, #8
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	4610      	mov	r0, r2
 8001846:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <WIZCHIP_READ+0x94>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	4610      	mov	r0, r2
 8001852:	4798      	blx	r3
 8001854:	e011      	b.n	800187a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	b2db      	uxtb	r3, r3
 800185c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	b2db      	uxtb	r3, r3
 8001864:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <WIZCHIP_READ+0x94>)
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	f107 020c 	add.w	r2, r7, #12
 8001874:	2103      	movs	r1, #3
 8001876:	4610      	mov	r0, r2
 8001878:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <WIZCHIP_READ+0x94>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4798      	blx	r3
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <WIZCHIP_READ+0x94>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <WIZCHIP_READ+0x94>)
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	4798      	blx	r3
   return ret;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008

080018a0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <WIZCHIP_WRITE+0x98>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <WIZCHIP_WRITE+0x98>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <WIZCHIP_WRITE+0x98>)
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d119      	bne.n	80018fc <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <WIZCHIP_WRITE+0x98>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	0c12      	lsrs	r2, r2, #16
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	4610      	mov	r0, r2
 80018d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <WIZCHIP_WRITE+0x98>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	0a12      	lsrs	r2, r2, #8
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	4610      	mov	r0, r2
 80018e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <WIZCHIP_WRITE+0x98>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	4610      	mov	r0, r2
 80018ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <WIZCHIP_WRITE+0x98>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	4610      	mov	r0, r2
 80018f8:	4798      	blx	r3
 80018fa:	e013      	b.n	8001924 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	0c1b      	lsrs	r3, r3, #16
 8001900:	b2db      	uxtb	r3, r3
 8001902:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	0a1b      	lsrs	r3, r3, #8
 8001908:	b2db      	uxtb	r3, r3
 800190a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <WIZCHIP_WRITE+0x98>)
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	f107 020c 	add.w	r2, r7, #12
 800191e:	2104      	movs	r1, #4
 8001920:	4610      	mov	r0, r2
 8001922:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <WIZCHIP_WRITE+0x98>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800192a:	4b03      	ldr	r3, [pc, #12]	; (8001938 <WIZCHIP_WRITE+0x98>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	4798      	blx	r3
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000008 	.word	0x20000008

0800193c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	4613      	mov	r3, r2
 8001948:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <WIZCHIP_READ_BUF+0xbc>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <WIZCHIP_READ_BUF+0xbc>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <WIZCHIP_READ_BUF+0xbc>)
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <WIZCHIP_READ_BUF+0x2a>
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <WIZCHIP_READ_BUF+0xbc>)
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	2b00      	cmp	r3, #0
 8001964:	d126      	bne.n	80019b4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001966:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <WIZCHIP_READ_BUF+0xbc>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	0c12      	lsrs	r2, r2, #16
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	4610      	mov	r0, r2
 8001972:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <WIZCHIP_READ_BUF+0xbc>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	0a12      	lsrs	r2, r2, #8
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	4610      	mov	r0, r2
 8001980:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <WIZCHIP_READ_BUF+0xbc>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	4610      	mov	r0, r2
 800198c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800198e:	2300      	movs	r3, #0
 8001990:	82fb      	strh	r3, [r7, #22]
 8001992:	e00a      	b.n	80019aa <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <WIZCHIP_READ_BUF+0xbc>)
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	8afa      	ldrh	r2, [r7, #22]
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	188c      	adds	r4, r1, r2
 800199e:	4798      	blx	r3
 80019a0:	4603      	mov	r3, r0
 80019a2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80019a4:	8afb      	ldrh	r3, [r7, #22]
 80019a6:	3301      	adds	r3, #1
 80019a8:	82fb      	strh	r3, [r7, #22]
 80019aa:	8afa      	ldrh	r2, [r7, #22]
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d3f0      	bcc.n	8001994 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80019b2:	e017      	b.n	80019e4 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	0c1b      	lsrs	r3, r3, #16
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <WIZCHIP_READ_BUF+0xbc>)
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	f107 0210 	add.w	r2, r7, #16
 80019d2:	2103      	movs	r1, #3
 80019d4:	4610      	mov	r0, r2
 80019d6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <WIZCHIP_READ_BUF+0xbc>)
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	88fa      	ldrh	r2, [r7, #6]
 80019de:	4611      	mov	r1, r2
 80019e0:	68b8      	ldr	r0, [r7, #8]
 80019e2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <WIZCHIP_READ_BUF+0xbc>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80019ea:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <WIZCHIP_READ_BUF+0xbc>)
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	4798      	blx	r3
}
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	20000008 	.word	0x20000008

080019fc <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	4613      	mov	r3, r2
 8001a08:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001a10:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d126      	bne.n	8001a74 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	0c12      	lsrs	r2, r2, #16
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	4610      	mov	r0, r2
 8001a32:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	0a12      	lsrs	r2, r2, #8
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	82fb      	strh	r3, [r7, #22]
 8001a52:	e00a      	b.n	8001a6a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	8afa      	ldrh	r2, [r7, #22]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	440a      	add	r2, r1
 8001a5e:	7812      	ldrb	r2, [r2, #0]
 8001a60:	4610      	mov	r0, r2
 8001a62:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001a64:	8afb      	ldrh	r3, [r7, #22]
 8001a66:	3301      	adds	r3, #1
 8001a68:	82fb      	strh	r3, [r7, #22]
 8001a6a:	8afa      	ldrh	r2, [r7, #22]
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d3f0      	bcc.n	8001a54 <WIZCHIP_WRITE_BUF+0x58>
 8001a72:	e017      	b.n	8001aa4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	0c1b      	lsrs	r3, r3, #16
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	f107 0210 	add.w	r2, r7, #16
 8001a92:	2103      	movs	r1, #3
 8001a94:	4610      	mov	r0, r2
 8001a96:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	88fa      	ldrh	r2, [r7, #6]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	68b8      	ldr	r0, [r7, #8]
 8001aa2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001aaa:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	4798      	blx	r3
}
 8001ab0:	bf00      	nop
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000008 	.word	0x20000008

08001abc <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	81fb      	strh	r3, [r7, #14]
 8001aca:	2300      	movs	r3, #0
 8001acc:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fe94 	bl	8001808 <WIZCHIP_READ>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001ae4:	89bb      	ldrh	r3, [r7, #12]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	b29c      	uxth	r4, r3
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	3301      	adds	r3, #1
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fe86 	bl	8001808 <WIZCHIP_READ>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4423      	add	r3, r4
 8001b02:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001b04:	89bb      	ldrh	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d01a      	beq.n	8001b40 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	3301      	adds	r3, #1
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fe76 	bl	8001808 <WIZCHIP_READ>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001b20:	89fb      	ldrh	r3, [r7, #14]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b29c      	uxth	r4, r3
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fe68 	bl	8001808 <WIZCHIP_READ>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4423      	add	r3, r4
 8001b3e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001b40:	89fa      	ldrh	r2, [r7, #14]
 8001b42:	89bb      	ldrh	r3, [r7, #12]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1c2      	bne.n	8001ace <getSn_TX_FSR+0x12>
   return val;
 8001b48:	89fb      	ldrh	r3, [r7, #14]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd90      	pop	{r4, r7, pc}

08001b52 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001b52:	b590      	push	{r4, r7, lr}
 8001b54:	b085      	sub	sp, #20
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	81fb      	strh	r3, [r7, #14]
 8001b60:	2300      	movs	r3, #0
 8001b62:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	3301      	adds	r3, #1
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fe49 	bl	8001808 <WIZCHIP_READ>
 8001b76:	4603      	mov	r3, r0
 8001b78:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001b7a:	89bb      	ldrh	r3, [r7, #12]
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	b29c      	uxth	r4, r3
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	3301      	adds	r3, #1
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fe3b 	bl	8001808 <WIZCHIP_READ>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4423      	add	r3, r4
 8001b98:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001b9a:	89bb      	ldrh	r3, [r7, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01a      	beq.n	8001bd6 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe2b 	bl	8001808 <WIZCHIP_READ>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001bb6:	89fb      	ldrh	r3, [r7, #14]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	b29c      	uxth	r4, r3
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fe1d 	bl	8001808 <WIZCHIP_READ>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4423      	add	r3, r4
 8001bd4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001bd6:	89fa      	ldrh	r2, [r7, #14]
 8001bd8:	89bb      	ldrh	r3, [r7, #12]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d1c2      	bne.n	8001b64 <getSn_RX_RSR+0x12>
   return val;
 8001bde:	89fb      	ldrh	r3, [r7, #14]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd90      	pop	{r4, r7, pc}

08001be8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001c00:	88bb      	ldrh	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d048      	beq.n	8001c98 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fdf8 	bl	8001808 <WIZCHIP_READ>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	b29c      	uxth	r4, r3
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	3301      	adds	r3, #1
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fdeb 	bl	8001808 <WIZCHIP_READ>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4423      	add	r3, r4
 8001c38:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001c3a:	89fb      	ldrh	r3, [r7, #14]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	79fa      	ldrb	r2, [r7, #7]
 8001c40:	0092      	lsls	r2, r2, #2
 8001c42:	3202      	adds	r2, #2
 8001c44:	00d2      	lsls	r2, r2, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001c4a:	88bb      	ldrh	r3, [r7, #4]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	6839      	ldr	r1, [r7, #0]
 8001c50:	68b8      	ldr	r0, [r7, #8]
 8001c52:	f7ff fed3 	bl	80019fc <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001c56:	89fa      	ldrh	r2, [r7, #14]
 8001c58:	88bb      	ldrh	r3, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	3301      	adds	r3, #1
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	4619      	mov	r1, r3
 8001c76:	4610      	mov	r0, r2
 8001c78:	f7ff fe12 	bl	80018a0 <WIZCHIP_WRITE>
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3301      	adds	r3, #1
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001c88:	461a      	mov	r2, r3
 8001c8a:	89fb      	ldrh	r3, [r7, #14]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4610      	mov	r0, r2
 8001c92:	f7ff fe05 	bl	80018a0 <WIZCHIP_WRITE>
 8001c96:	e000      	b.n	8001c9a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001c98:	bf00      	nop
}
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd90      	pop	{r4, r7, pc}

08001ca0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	2300      	movs	r3, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <reg_wizchip_cs_cbfunc+0x16>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <reg_wizchip_cs_cbfunc+0x40>)
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <reg_wizchip_cs_cbfunc+0x44>)
 8001d52:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <reg_wizchip_cs_cbfunc+0x40>)
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <reg_wizchip_cs_cbfunc+0x48>)
 8001d58:	619a      	str	r2, [r3, #24]
 8001d5a:	e006      	b.n	8001d6a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <reg_wizchip_cs_cbfunc+0x40>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <reg_wizchip_cs_cbfunc+0x40>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6193      	str	r3, [r2, #24]
   }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000008 	.word	0x20000008
 8001d7c:	08001cbd 	.word	0x08001cbd
 8001d80:	08001ccb 	.word	0x08001ccb

08001d84 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001d8e:	bf00      	nop
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f9      	beq.n	8001d90 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <reg_wizchip_spi_cbfunc+0x24>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <reg_wizchip_spi_cbfunc+0x50>)
 8001dac:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001db0:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <reg_wizchip_spi_cbfunc+0x54>)
 8001db2:	621a      	str	r2, [r3, #32]
 8001db4:	e006      	b.n	8001dc4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001db6:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6213      	str	r3, [r2, #32]
   }
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	08001d11 	.word	0x08001d11
 8001dd8:	08001d21 	.word	0x08001d21

08001ddc <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2206      	movs	r2, #6
 8001de6:	4619      	mov	r1, r3
 8001de8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001dec:	f7ff fda6 	bl	800193c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2204      	movs	r2, #4
 8001df6:	4619      	mov	r1, r3
 8001df8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dfc:	f7ff fd9e 	bl	800193c <WIZCHIP_READ_BUF>
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	2204      	movs	r2, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001e0c:	f7ff fd96 	bl	800193c <WIZCHIP_READ_BUF>
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2204      	movs	r2, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e1c:	f7ff fd8e 	bl	800193c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff fd3c 	bl	80018a0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff fced 	bl	8001808 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2206      	movs	r2, #6
 8001e32:	4619      	mov	r1, r3
 8001e34:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001e38:	f7ff fde0 	bl	80019fc <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2204      	movs	r2, #4
 8001e42:	4619      	mov	r1, r3
 8001e44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e48:	f7ff fdd8 	bl	80019fc <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	2204      	movs	r2, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001e58:	f7ff fdd0 	bl	80019fc <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2204      	movs	r2, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e68:	f7ff fdc8 	bl	80019fc <WIZCHIP_WRITE_BUF>
}
 8001e6c:	bf00      	nop
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001e82:	f7ff ffab 	bl	8001ddc <wizchip_sw_reset>
   if(txsize)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d03b      	beq.n	8001f04 <wizchip_init+0x90>
   {
      tmp = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e015      	b.n	8001ec2 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001ea8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001eac:	2b10      	cmp	r3, #16
 8001eae:	dd02      	ble.n	8001eb6 <wizchip_init+0x42>
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb4:	e066      	b.n	8001f84 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec6:	2b07      	cmp	r3, #7
 8001ec8:	dde5      	ble.n	8001e96 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
 8001ece:	e015      	b.n	8001efc <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7ff fcd8 	bl	80018a0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f00:	2b07      	cmp	r3, #7
 8001f02:	dde5      	ble.n	8001ed0 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d03b      	beq.n	8001f82 <wizchip_init+0x10e>
   {
      tmp = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e015      	b.n	8001f40 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8001f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	7bbb      	ldrb	r3, [r7, #14]
 8001f20:	4413      	add	r3, r2
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001f26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f2a:	2b10      	cmp	r3, #16
 8001f2c:	dd02      	ble.n	8001f34 <wizchip_init+0xc0>
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e027      	b.n	8001f84 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f44:	2b07      	cmp	r3, #7
 8001f46:	dde5      	ble.n	8001f14 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e015      	b.n	8001f7a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	3301      	adds	r3, #1
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f7ff fc99 	bl	80018a0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	2b07      	cmp	r3, #7
 8001f80:	dde5      	ble.n	8001f4e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2206      	movs	r2, #6
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f9e:	f7ff fd2d 	bl	80019fc <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	330e      	adds	r3, #14
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fae:	f7ff fd25 	bl	80019fc <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	330a      	adds	r3, #10
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001fbe:	f7ff fd1d 	bl	80019fc <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3306      	adds	r3, #6
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001fce:	f7ff fd15 	bl	80019fc <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7c9a      	ldrb	r2, [r3, #18]
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <wizchip_setnetinfo+0x78>)
 8001fd8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7cda      	ldrb	r2, [r3, #19]
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <wizchip_setnetinfo+0x78>)
 8001fe0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7d1a      	ldrb	r2, [r3, #20]
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <wizchip_setnetinfo+0x78>)
 8001fe8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7d5a      	ldrb	r2, [r3, #21]
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <wizchip_setnetinfo+0x78>)
 8001ff0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7d9a      	ldrb	r2, [r3, #22]
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <wizchip_setnetinfo+0x7c>)
 8001ff8:	701a      	strb	r2, [r3, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200000dc 	.word	0x200000dc
 8002008:	200000e0 	.word	0x200000e0

0800200c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2206      	movs	r2, #6
 8002018:	4619      	mov	r1, r3
 800201a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800201e:	f7ff fc8d 	bl	800193c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	330e      	adds	r3, #14
 8002026:	2204      	movs	r2, #4
 8002028:	4619      	mov	r1, r3
 800202a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800202e:	f7ff fc85 	bl	800193c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	330a      	adds	r3, #10
 8002036:	2204      	movs	r2, #4
 8002038:	4619      	mov	r1, r3
 800203a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800203e:	f7ff fc7d 	bl	800193c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3306      	adds	r3, #6
 8002046:	2204      	movs	r2, #4
 8002048:	4619      	mov	r1, r3
 800204a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800204e:	f7ff fc75 	bl	800193c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <wizchip_getnetinfo+0x78>)
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <wizchip_getnetinfo+0x78>)
 800205c:	785a      	ldrb	r2, [r3, #1]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <wizchip_getnetinfo+0x78>)
 8002064:	789a      	ldrb	r2, [r3, #2]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <wizchip_getnetinfo+0x78>)
 800206c:	78da      	ldrb	r2, [r3, #3]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <wizchip_getnetinfo+0x7c>)
 8002074:	781a      	ldrb	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	759a      	strb	r2, [r3, #22]
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200000dc 	.word	0x200000dc
 8002088:	200000e0 	.word	0x200000e0

0800208c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800208e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002092:	490e      	ldr	r1, [pc, #56]	; (80020cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <LoopForever+0xe>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002098:	e002      	b.n	80020a0 <LoopCopyDataInit>

0800209a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800209c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209e:	3304      	adds	r3, #4

080020a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a4:	d3f9      	bcc.n	800209a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a6:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020a8:	4c0b      	ldr	r4, [pc, #44]	; (80020d8 <LoopForever+0x16>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ac:	e001      	b.n	80020b2 <LoopFillZerobss>

080020ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b0:	3204      	adds	r2, #4

080020b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b4:	d3fb      	bcc.n	80020ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020b6:	f7ff fb95 	bl	80017e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ba:	f003 f8df 	bl	800527c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020be:	f7fe fabf 	bl	8000640 <main>

080020c2 <LoopForever>:

LoopForever:
    b LoopForever
 80020c2:	e7fe      	b.n	80020c2 <LoopForever>
  ldr   r0, =_estack
 80020c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020cc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80020d0:	08005c94 	.word	0x08005c94
  ldr r2, =_sbss
 80020d4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80020d8:	20000284 	.word	0x20000284

080020dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020dc:	e7fe      	b.n	80020dc <ADC1_2_IRQHandler>

080020de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e8:	2003      	movs	r0, #3
 80020ea:	f000 f95b 	bl	80023a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ee:	2000      	movs	r0, #0
 80020f0:	f000 f80e 	bl	8002110 <HAL_InitTick>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	71fb      	strb	r3, [r7, #7]
 80020fe:	e001      	b.n	8002104 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002100:	f7ff fa2a 	bl	8001558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002104:	79fb      	ldrb	r3, [r7, #7]

}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_InitTick+0x68>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d022      	beq.n	800216a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_InitTick+0x6c>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_InitTick+0x68>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002130:	fbb1 f3f3 	udiv	r3, r1, r3
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	4618      	mov	r0, r3
 800213a:	f000 f966 	bl	800240a <HAL_SYSTICK_Config>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10f      	bne.n	8002164 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	d809      	bhi.n	800215e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214a:	2200      	movs	r2, #0
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	f04f 30ff 	mov.w	r0, #4294967295
 8002152:	f000 f932 	bl	80023ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_InitTick+0x70>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	e007      	b.n	800216e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
 8002162:	e004      	b.n	800216e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e001      	b.n	800216e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000038 	.word	0x20000038
 800217c:	20000004 	.word	0x20000004
 8002180:	20000034 	.word	0x20000034

08002184 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_IncTick+0x1c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_IncTick+0x20>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4413      	add	r3, r2
 8002192:	4a03      	ldr	r2, [pc, #12]	; (80021a0 <HAL_IncTick+0x1c>)
 8002194:	6013      	str	r3, [r2, #0]
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000270 	.word	0x20000270
 80021a4:	20000038 	.word	0x20000038

080021a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return uwTick;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_GetTick+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000270 	.word	0x20000270

080021c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff ffee 	bl	80021a8 <HAL_GetTick>
 80021cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d004      	beq.n	80021e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_Delay+0x40>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4413      	add	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021e4:	bf00      	nop
 80021e6:	f7ff ffdf 	bl	80021a8 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d8f7      	bhi.n	80021e6 <HAL_Delay+0x26>
  {
  }
}
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000038 	.word	0x20000038

08002204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800222c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <__NVIC_GetPriorityGrouping+0x18>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 0307 	and.w	r3, r3, #7
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	2b00      	cmp	r3, #0
 8002278:	db0b      	blt.n	8002292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4907      	ldr	r1, [pc, #28]	; (80022a0 <__NVIC_EnableIRQ+0x38>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2001      	movs	r0, #1
 800228a:	fa00 f202 	lsl.w	r2, r0, r2
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db0a      	blt.n	80022ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	490c      	ldr	r1, [pc, #48]	; (80022f0 <__NVIC_SetPriority+0x4c>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022cc:	e00a      	b.n	80022e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4908      	ldr	r1, [pc, #32]	; (80022f4 <__NVIC_SetPriority+0x50>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	761a      	strb	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0307 	rsb	r3, r3, #7
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf28      	it	cs
 8002316:	2304      	movcs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3304      	adds	r3, #4
 800231e:	2b06      	cmp	r3, #6
 8002320:	d902      	bls.n	8002328 <NVIC_EncodePriority+0x30>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3b03      	subs	r3, #3
 8002326:	e000      	b.n	800232a <NVIC_EncodePriority+0x32>
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	401a      	ands	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43d9      	mvns	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
         );
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002370:	d301      	bcc.n	8002376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002372:	2301      	movs	r3, #1
 8002374:	e00f      	b.n	8002396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <SysTick_Config+0x40>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237e:	210f      	movs	r1, #15
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f7ff ff8e 	bl	80022a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <SysTick_Config+0x40>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <SysTick_Config+0x40>)
 8002390:	2207      	movs	r2, #7
 8002392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	e000e010 	.word	0xe000e010

080023a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff29 	bl	8002204 <__NVIC_SetPriorityGrouping>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff ff40 	bl	800224c <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff90 	bl	80022f8 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5f 	bl	80022a4 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff33 	bl	8002268 <__NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffa4 	bl	8002360 <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002432:	e15a      	b.n	80026ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2101      	movs	r1, #1
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	4013      	ands	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 814c 	beq.w	80026e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d00b      	beq.n	800246c <HAL_GPIO_Init+0x48>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d007      	beq.n	800246c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002460:	2b11      	cmp	r3, #17
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b12      	cmp	r3, #18
 800246a:	d130      	bne.n	80024ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024a2:	2201      	movs	r2, #1
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f003 0201 	and.w	r2, r3, #1
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0xea>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b12      	cmp	r3, #18
 800250c:	d123      	bne.n	8002556 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	08da      	lsrs	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	220f      	movs	r2, #15
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	6939      	ldr	r1, [r7, #16]
 8002552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	2203      	movs	r2, #3
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0203 	and.w	r2, r3, #3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80a6 	beq.w	80026e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002598:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <HAL_GPIO_Init+0x2e4>)
 800259a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259c:	4a5a      	ldr	r2, [pc, #360]	; (8002708 <HAL_GPIO_Init+0x2e4>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6613      	str	r3, [r2, #96]	; 0x60
 80025a4:	4b58      	ldr	r3, [pc, #352]	; (8002708 <HAL_GPIO_Init+0x2e4>)
 80025a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b0:	4a56      	ldr	r2, [pc, #344]	; (800270c <HAL_GPIO_Init+0x2e8>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025da:	d01f      	beq.n	800261c <HAL_GPIO_Init+0x1f8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a4c      	ldr	r2, [pc, #304]	; (8002710 <HAL_GPIO_Init+0x2ec>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d019      	beq.n	8002618 <HAL_GPIO_Init+0x1f4>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a4b      	ldr	r2, [pc, #300]	; (8002714 <HAL_GPIO_Init+0x2f0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d013      	beq.n	8002614 <HAL_GPIO_Init+0x1f0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a4a      	ldr	r2, [pc, #296]	; (8002718 <HAL_GPIO_Init+0x2f4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00d      	beq.n	8002610 <HAL_GPIO_Init+0x1ec>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a49      	ldr	r2, [pc, #292]	; (800271c <HAL_GPIO_Init+0x2f8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <HAL_GPIO_Init+0x1e8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a48      	ldr	r2, [pc, #288]	; (8002720 <HAL_GPIO_Init+0x2fc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d101      	bne.n	8002608 <HAL_GPIO_Init+0x1e4>
 8002604:	2305      	movs	r3, #5
 8002606:	e00a      	b.n	800261e <HAL_GPIO_Init+0x1fa>
 8002608:	2306      	movs	r3, #6
 800260a:	e008      	b.n	800261e <HAL_GPIO_Init+0x1fa>
 800260c:	2304      	movs	r3, #4
 800260e:	e006      	b.n	800261e <HAL_GPIO_Init+0x1fa>
 8002610:	2303      	movs	r3, #3
 8002612:	e004      	b.n	800261e <HAL_GPIO_Init+0x1fa>
 8002614:	2302      	movs	r3, #2
 8002616:	e002      	b.n	800261e <HAL_GPIO_Init+0x1fa>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_GPIO_Init+0x1fa>
 800261c:	2300      	movs	r3, #0
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	f002 0203 	and.w	r2, r2, #3
 8002624:	0092      	lsls	r2, r2, #2
 8002626:	4093      	lsls	r3, r2
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800262e:	4937      	ldr	r1, [pc, #220]	; (800270c <HAL_GPIO_Init+0x2e8>)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800263c:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_GPIO_Init+0x300>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002660:	4a30      	ldr	r2, [pc, #192]	; (8002724 <HAL_GPIO_Init+0x300>)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002666:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <HAL_GPIO_Init+0x300>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800268a:	4a26      	ldr	r2, [pc, #152]	; (8002724 <HAL_GPIO_Init+0x300>)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_GPIO_Init+0x300>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	43db      	mvns	r3, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026b4:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <HAL_GPIO_Init+0x300>)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026ba:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <HAL_GPIO_Init+0x300>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026de:	4a11      	ldr	r2, [pc, #68]	; (8002724 <HAL_GPIO_Init+0x300>)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f47f ae9d 	bne.w	8002434 <HAL_GPIO_Init+0x10>
  }
}
 80026fa:	bf00      	nop
 80026fc:	bf00      	nop
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40021000 	.word	0x40021000
 800270c:	40010000 	.word	0x40010000
 8002710:	48000400 	.word	0x48000400
 8002714:	48000800 	.word	0x48000800
 8002718:	48000c00 	.word	0x48000c00
 800271c:	48001000 	.word	0x48001000
 8002720:	48001400 	.word	0x48001400
 8002724:	40010400 	.word	0x40010400

08002728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
 8002734:	4613      	mov	r3, r2
 8002736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002738:	787b      	ldrb	r3, [r7, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002744:	e002      	b.n	800274c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800276e:	4a05      	ldr	r2, [pc, #20]	; (8002784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f806 	bl	8002788 <HAL_GPIO_EXTI_Callback>
  }
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40010400 	.word	0x40010400

08002788 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d141      	bne.n	8002832 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ae:	4b4b      	ldr	r3, [pc, #300]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ba:	d131      	bne.n	8002820 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027bc:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c2:	4a46      	ldr	r2, [pc, #280]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027cc:	4b43      	ldr	r3, [pc, #268]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027d4:	4a41      	ldr	r2, [pc, #260]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027dc:	4b40      	ldr	r3, [pc, #256]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2232      	movs	r2, #50	; 0x32
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	4a3f      	ldr	r2, [pc, #252]	; (80028e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	0c9b      	lsrs	r3, r3, #18
 80027ee:	3301      	adds	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f2:	e002      	b.n	80027fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002806:	d102      	bne.n	800280e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f2      	bne.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800280e:	4b33      	ldr	r3, [pc, #204]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281a:	d158      	bne.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e057      	b.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002820:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002826:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800282c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002830:	e04d      	b.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002838:	d141      	bne.n	80028be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800283a:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002846:	d131      	bne.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002848:	4b24      	ldr	r3, [pc, #144]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800284e:	4a23      	ldr	r2, [pc, #140]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002858:	4b20      	ldr	r3, [pc, #128]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002860:	4a1e      	ldr	r2, [pc, #120]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002866:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2232      	movs	r2, #50	; 0x32
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	0c9b      	lsrs	r3, r3, #18
 800287a:	3301      	adds	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800287e:	e002      	b.n	8002886 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3b01      	subs	r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002892:	d102      	bne.n	800289a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f2      	bne.n	8002880 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a6:	d112      	bne.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e011      	b.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80028bc:	e007      	b.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	40007000 	.word	0x40007000
 80028e0:	20000004 	.word	0x20000004
 80028e4:	431bde83 	.word	0x431bde83

080028e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f6:	6093      	str	r3, [r2, #8]
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40007000 	.word	0x40007000

08002908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e308      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d075      	beq.n	8002a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002926:	4ba3      	ldr	r3, [pc, #652]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002930:	4ba0      	ldr	r3, [pc, #640]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b0c      	cmp	r3, #12
 800293e:	d102      	bne.n	8002946 <HAL_RCC_OscConfig+0x3e>
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d002      	beq.n	800294c <HAL_RCC_OscConfig+0x44>
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b99      	ldr	r3, [pc, #612]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e2e3      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b91      	ldr	r3, [pc, #580]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a90      	ldr	r2, [pc, #576]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b8b      	ldr	r3, [pc, #556]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a8a      	ldr	r2, [pc, #552]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b88      	ldr	r3, [pc, #544]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a87      	ldr	r2, [pc, #540]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 80029a0:	4b84      	ldr	r3, [pc, #528]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a83      	ldr	r2, [pc, #524]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b81      	ldr	r3, [pc, #516]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a80      	ldr	r2, [pc, #512]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7ff fbf2 	bl	80021a8 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff fbee 	bl	80021a8 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e2a8      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029da:	4b76      	ldr	r3, [pc, #472]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7ff fbde 	bl	80021a8 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff fbda 	bl	80021a8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e294      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a02:	4b6c      	ldr	r3, [pc, #432]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d075      	beq.n	8002b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a1e:	4b65      	ldr	r3, [pc, #404]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a28:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	d102      	bne.n	8002a3e <HAL_RCC_OscConfig+0x136>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_OscConfig+0x13c>
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d11f      	bne.n	8002a84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a44:	4b5b      	ldr	r3, [pc, #364]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_OscConfig+0x154>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e267      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5c:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	4952      	ldr	r1, [pc, #328]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a70:	4b51      	ldr	r3, [pc, #324]	; (8002bb8 <HAL_RCC_OscConfig+0x2b0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fb4b 	bl	8002110 <HAL_InitTick>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d043      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e253      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d023      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a48      	ldr	r2, [pc, #288]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7ff fb86 	bl	80021a8 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7ff fb82 	bl	80021a8 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e23c      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab2:	4b40      	ldr	r3, [pc, #256]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	061b      	lsls	r3, r3, #24
 8002acc:	4939      	ldr	r1, [pc, #228]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
 8002ad2:	e01a      	b.n	8002b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad4:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a36      	ldr	r2, [pc, #216]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7ff fb62 	bl	80021a8 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae8:	f7ff fb5e 	bl	80021a8 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e218      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x1e0>
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d03c      	beq.n	8002b90 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b24:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7ff fb3b 	bl	80021a8 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b36:	f7ff fb37 	bl	80021a8 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1f1      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b48:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0ef      	beq.n	8002b36 <HAL_RCC_OscConfig+0x22e>
 8002b56:	e01b      	b.n	8002b90 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b58:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5e:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7ff fb1e 	bl	80021a8 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b70:	f7ff fb1a 	bl	80021a8 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1d4      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ef      	bne.n	8002b70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80ab 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_RCC_OscConfig+0x2b4>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e005      	b.n	8002bbe <HAL_RCC_OscConfig+0x2b6>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	20000034 	.word	0x20000034
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	4baf      	ldr	r3, [pc, #700]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	4aae      	ldr	r2, [pc, #696]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8002bce:	4bac      	ldr	r3, [pc, #688]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bde:	4ba9      	ldr	r3, [pc, #676]	; (8002e84 <HAL_RCC_OscConfig+0x57c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d118      	bne.n	8002c1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bea:	4ba6      	ldr	r3, [pc, #664]	; (8002e84 <HAL_RCC_OscConfig+0x57c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4aa5      	ldr	r2, [pc, #660]	; (8002e84 <HAL_RCC_OscConfig+0x57c>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf6:	f7ff fad7 	bl	80021a8 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfe:	f7ff fad3 	bl	80021a8 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e18d      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c10:	4b9c      	ldr	r3, [pc, #624]	; (8002e84 <HAL_RCC_OscConfig+0x57c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d108      	bne.n	8002c36 <HAL_RCC_OscConfig+0x32e>
 8002c24:	4b96      	ldr	r3, [pc, #600]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	4a95      	ldr	r2, [pc, #596]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c34:	e024      	b.n	8002c80 <HAL_RCC_OscConfig+0x378>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d110      	bne.n	8002c60 <HAL_RCC_OscConfig+0x358>
 8002c3e:	4b90      	ldr	r3, [pc, #576]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	4a8e      	ldr	r2, [pc, #568]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c4e:	4b8c      	ldr	r3, [pc, #560]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c54:	4a8a      	ldr	r2, [pc, #552]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c5e:	e00f      	b.n	8002c80 <HAL_RCC_OscConfig+0x378>
 8002c60:	4b87      	ldr	r3, [pc, #540]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	4a86      	ldr	r2, [pc, #536]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c70:	4b83      	ldr	r3, [pc, #524]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	4a82      	ldr	r2, [pc, #520]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002c78:	f023 0304 	bic.w	r3, r3, #4
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d016      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7ff fa8e 	bl	80021a8 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7ff fa8a 	bl	80021a8 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e142      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca6:	4b76      	ldr	r3, [pc, #472]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ed      	beq.n	8002c90 <HAL_RCC_OscConfig+0x388>
 8002cb4:	e015      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7ff fa77 	bl	80021a8 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7ff fa73 	bl	80021a8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e12b      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd4:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ed      	bne.n	8002cbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce8:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	4a64      	ldr	r2, [pc, #400]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d03c      	beq.n	8002d7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01c      	beq.n	8002d42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d08:	4b5d      	ldr	r3, [pc, #372]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d0e:	4a5c      	ldr	r2, [pc, #368]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7ff fa46 	bl	80021a8 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d20:	f7ff fa42 	bl	80021a8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e0fc      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d32:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ef      	beq.n	8002d20 <HAL_RCC_OscConfig+0x418>
 8002d40:	e01b      	b.n	8002d7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d42:	4b4f      	ldr	r3, [pc, #316]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d48:	4a4d      	ldr	r2, [pc, #308]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7ff fa29 	bl	80021a8 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d5a:	f7ff fa25 	bl	80021a8 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0df      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d6c:	4b44      	ldr	r3, [pc, #272]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ef      	bne.n	8002d5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80d3 	beq.w	8002f2a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d84:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b0c      	cmp	r3, #12
 8002d8e:	f000 808d 	beq.w	8002eac <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d15a      	bne.n	8002e50 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a38      	ldr	r2, [pc, #224]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7ff f9ff 	bl	80021a8 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7ff f9fb 	bl	80021a8 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0b5      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc0:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_RCC_OscConfig+0x580>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6a11      	ldr	r1, [r2, #32]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ddc:	3a01      	subs	r2, #1
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	4311      	orrs	r1, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002de6:	0212      	lsls	r2, r2, #8
 8002de8:	4311      	orrs	r1, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dee:	0852      	lsrs	r2, r2, #1
 8002df0:	3a01      	subs	r2, #1
 8002df2:	0552      	lsls	r2, r2, #21
 8002df4:	4311      	orrs	r1, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dfa:	0852      	lsrs	r2, r2, #1
 8002dfc:	3a01      	subs	r2, #1
 8002dfe:	0652      	lsls	r2, r2, #25
 8002e00:	4311      	orrs	r1, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e06:	06d2      	lsls	r2, r2, #27
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	491d      	ldr	r1, [pc, #116]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7ff f9be 	bl	80021a8 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7ff f9ba 	bl	80021a8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e074      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x528>
 8002e4e:	e06c      	b.n	8002f2a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002e62:	f023 0303 	bic.w	r3, r3, #3
 8002e66:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <HAL_RCC_OscConfig+0x578>)
 8002e6e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7ff f996 	bl	80021a8 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7e:	e00e      	b.n	8002e9e <HAL_RCC_OscConfig+0x596>
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40007000 	.word	0x40007000
 8002e88:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7ff f98c 	bl	80021a8 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e046      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9e:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_RCC_OscConfig+0x62c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x584>
 8002eaa:	e03e      	b.n	8002f2a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e039      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002eb8:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <HAL_RCC_OscConfig+0x62c>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f003 0203 	and.w	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d12c      	bne.n	8002f26 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d123      	bne.n	8002f26 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d11b      	bne.n	8002f26 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d113      	bne.n	8002f26 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1c:	085b      	lsrs	r3, r3, #1
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000

08002f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e11e      	b.n	800318e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	4b91      	ldr	r3, [pc, #580]	; (8003198 <HAL_RCC_ClockConfig+0x260>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d910      	bls.n	8002f80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b8e      	ldr	r3, [pc, #568]	; (8003198 <HAL_RCC_ClockConfig+0x260>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 020f 	bic.w	r2, r3, #15
 8002f66:	498c      	ldr	r1, [pc, #560]	; (8003198 <HAL_RCC_ClockConfig+0x260>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b8a      	ldr	r3, [pc, #552]	; (8003198 <HAL_RCC_ClockConfig+0x260>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e106      	b.n	800318e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d073      	beq.n	8003074 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d129      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f94:	4b81      	ldr	r3, [pc, #516]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0f4      	b.n	800318e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002fa4:	f000 f99e 	bl	80032e4 <RCC_GetSysClockFreqFromPLLSource>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4a7c      	ldr	r2, [pc, #496]	; (80031a0 <HAL_RCC_ClockConfig+0x268>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d93f      	bls.n	8003032 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fb2:	4b7a      	ldr	r3, [pc, #488]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d033      	beq.n	8003032 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d12f      	bne.n	8003032 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fd2:	4b72      	ldr	r3, [pc, #456]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fda:	4a70      	ldr	r2, [pc, #448]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8002fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e024      	b.n	8003032 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff0:	4b6a      	ldr	r3, [pc, #424]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0c6      	b.n	800318e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003000:	4b66      	ldr	r3, [pc, #408]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0be      	b.n	800318e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003010:	f000 f8ce 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 8003014:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4a61      	ldr	r2, [pc, #388]	; (80031a0 <HAL_RCC_ClockConfig+0x268>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d909      	bls.n	8003032 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800301e:	4b5f      	ldr	r3, [pc, #380]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003026:	4a5d      	ldr	r2, [pc, #372]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8003028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800302e:	2380      	movs	r3, #128	; 0x80
 8003030:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003032:	4b5a      	ldr	r3, [pc, #360]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4957      	ldr	r1, [pc, #348]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003044:	f7ff f8b0 	bl	80021a8 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	e00a      	b.n	8003062 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7ff f8ac 	bl	80021a8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e095      	b.n	800318e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b4e      	ldr	r3, [pc, #312]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 020c 	and.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	d1eb      	bne.n	800304c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d023      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800308c:	4b43      	ldr	r3, [pc, #268]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a42      	ldr	r2, [pc, #264]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8003092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003096:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030a4:	4b3d      	ldr	r3, [pc, #244]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030ac:	4a3b      	ldr	r2, [pc, #236]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 80030ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b39      	ldr	r3, [pc, #228]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	4936      	ldr	r1, [pc, #216]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
 80030c6:	e008      	b.n	80030da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b80      	cmp	r3, #128	; 0x80
 80030cc:	d105      	bne.n	80030da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030ce:	4b33      	ldr	r3, [pc, #204]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	4a32      	ldr	r2, [pc, #200]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 80030d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030da:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <HAL_RCC_ClockConfig+0x260>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d21d      	bcs.n	8003124 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e8:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <HAL_RCC_ClockConfig+0x260>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f023 020f 	bic.w	r2, r3, #15
 80030f0:	4929      	ldr	r1, [pc, #164]	; (8003198 <HAL_RCC_ClockConfig+0x260>)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030f8:	f7ff f856 	bl	80021a8 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7ff f852 	bl	80021a8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e03b      	b.n	800318e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b20      	ldr	r3, [pc, #128]	; (8003198 <HAL_RCC_ClockConfig+0x260>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d1ed      	bne.n	8003100 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4917      	ldr	r1, [pc, #92]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	490f      	ldr	r1, [pc, #60]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003162:	f000 f825 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 8003166:	4602      	mov	r2, r0
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <HAL_RCC_ClockConfig+0x264>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	490c      	ldr	r1, [pc, #48]	; (80031a4 <HAL_RCC_ClockConfig+0x26c>)
 8003174:	5ccb      	ldrb	r3, [r1, r3]
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	fa22 f303 	lsr.w	r3, r2, r3
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x270>)
 8003180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_RCC_ClockConfig+0x274>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe ffc2 	bl	8002110 <HAL_InitTick>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40022000 	.word	0x40022000
 800319c:	40021000 	.word	0x40021000
 80031a0:	04c4b400 	.word	0x04c4b400
 80031a4:	08005c10 	.word	0x08005c10
 80031a8:	20000004 	.word	0x20000004
 80031ac:	20000034 	.word	0x20000034

080031b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031b6:	4b2c      	ldr	r3, [pc, #176]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d102      	bne.n	80031c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031c2:	4b2a      	ldr	r3, [pc, #168]	; (800326c <HAL_RCC_GetSysClockFreq+0xbc>)
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	e047      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d102      	bne.n	80031da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031d4:	4b26      	ldr	r3, [pc, #152]	; (8003270 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	e03e      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80031da:	4b23      	ldr	r3, [pc, #140]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d136      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	3301      	adds	r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d10c      	bne.n	800321e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003204:	4a1a      	ldr	r2, [pc, #104]	; (8003270 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	4a16      	ldr	r2, [pc, #88]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb8>)
 800320e:	68d2      	ldr	r2, [r2, #12]
 8003210:	0a12      	lsrs	r2, r2, #8
 8003212:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	617b      	str	r3, [r7, #20]
      break;
 800321c:	e00c      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800321e:	4a13      	ldr	r2, [pc, #76]	; (800326c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	4a10      	ldr	r2, [pc, #64]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003228:	68d2      	ldr	r2, [r2, #12]
 800322a:	0a12      	lsrs	r2, r2, #8
 800322c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	617b      	str	r3, [r7, #20]
      break;
 8003236:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb8>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	0e5b      	lsrs	r3, r3, #25
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	e001      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003258:	693b      	ldr	r3, [r7, #16]
}
 800325a:	4618      	mov	r0, r3
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	00f42400 	.word	0x00f42400
 8003270:	016e3600 	.word	0x016e3600

08003274 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <HAL_RCC_GetHCLKFreq+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000004 	.word	0x20000004

0800328c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003290:	f7ff fff0 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4904      	ldr	r1, [pc, #16]	; (80032b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	08005c20 	.word	0x08005c20

080032b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032bc:	f7ff ffda 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	0adb      	lsrs	r3, r3, #11
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4904      	ldr	r1, [pc, #16]	; (80032e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	08005c20 	.word	0x08005c20

080032e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ea:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032f4:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3301      	adds	r3, #1
 8003300:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d10c      	bne.n	8003322 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003308:	4a17      	ldr	r2, [pc, #92]	; (8003368 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	4a14      	ldr	r2, [pc, #80]	; (8003364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003312:	68d2      	ldr	r2, [r2, #12]
 8003314:	0a12      	lsrs	r2, r2, #8
 8003316:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	617b      	str	r3, [r7, #20]
    break;
 8003320:	e00c      	b.n	800333c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800332c:	68d2      	ldr	r2, [r2, #12]
 800332e:	0a12      	lsrs	r2, r2, #8
 8003330:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]
    break;
 800333a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	0e5b      	lsrs	r3, r3, #25
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	3301      	adds	r3, #1
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003356:	687b      	ldr	r3, [r7, #4]
}
 8003358:	4618      	mov	r0, r3
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40021000 	.word	0x40021000
 8003368:	016e3600 	.word	0x016e3600
 800336c:	00f42400 	.word	0x00f42400

08003370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003378:	2300      	movs	r3, #0
 800337a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800337c:	2300      	movs	r3, #0
 800337e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8098 	beq.w	80034be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003392:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10d      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	4b40      	ldr	r3, [pc, #256]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	4a3f      	ldr	r2, [pc, #252]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6593      	str	r3, [r2, #88]	; 0x58
 80033aa:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b6:	2301      	movs	r3, #1
 80033b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ba:	4b3a      	ldr	r3, [pc, #232]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a39      	ldr	r2, [pc, #228]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033c6:	f7fe feef 	bl	80021a8 <HAL_GetTick>
 80033ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033cc:	e009      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ce:	f7fe feeb 	bl	80021a8 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d902      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	74fb      	strb	r3, [r7, #19]
        break;
 80033e0:	e005      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033e2:	4b30      	ldr	r3, [pc, #192]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ef      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d159      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033f4:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01e      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	429a      	cmp	r2, r3
 800340e:	d019      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003410:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800341a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800341c:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800342c:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800343c:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344e:	f7fe feab 	bl	80021a8 <HAL_GetTick>
 8003452:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003454:	e00b      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe fea7 	bl	80021a8 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d902      	bls.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	74fb      	strb	r3, [r7, #19]
            break;
 800346c:	e006      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ec      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003490:	4903      	ldr	r1, [pc, #12]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003498:	e008      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800349a:	7cfb      	ldrb	r3, [r7, #19]
 800349c:	74bb      	strb	r3, [r7, #18]
 800349e:	e005      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ac:	7c7b      	ldrb	r3, [r7, #17]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d105      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b2:	4baf      	ldr	r3, [pc, #700]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	4aae      	ldr	r2, [pc, #696]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ca:	4ba9      	ldr	r3, [pc, #676]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f023 0203 	bic.w	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	49a5      	ldr	r1, [pc, #660]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ec:	4ba0      	ldr	r3, [pc, #640]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f023 020c 	bic.w	r2, r3, #12
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	499d      	ldr	r1, [pc, #628]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800350e:	4b98      	ldr	r3, [pc, #608]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4994      	ldr	r1, [pc, #592]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003530:	4b8f      	ldr	r3, [pc, #572]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	498c      	ldr	r1, [pc, #560]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003552:	4b87      	ldr	r3, [pc, #540]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	4983      	ldr	r1, [pc, #524]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003574:	4b7e      	ldr	r3, [pc, #504]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	497b      	ldr	r1, [pc, #492]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	4972      	ldr	r1, [pc, #456]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b8:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	496a      	ldr	r1, [pc, #424]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035da:	4b65      	ldr	r3, [pc, #404]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	4961      	ldr	r1, [pc, #388]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035fc:	4b5c      	ldr	r3, [pc, #368]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003602:	f023 0203 	bic.w	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	4959      	ldr	r1, [pc, #356]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800361e:	4b54      	ldr	r3, [pc, #336]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003624:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	4950      	ldr	r1, [pc, #320]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d015      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003640:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4948      	ldr	r1, [pc, #288]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800365e:	d105      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003660:	4b43      	ldr	r3, [pc, #268]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a42      	ldr	r2, [pc, #264]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800366a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003678:	4b3d      	ldr	r3, [pc, #244]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	493a      	ldr	r1, [pc, #232]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003696:	d105      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003698:	4b35      	ldr	r3, [pc, #212]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a34      	ldr	r2, [pc, #208]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800369e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d015      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036b0:	4b2f      	ldr	r3, [pc, #188]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	492c      	ldr	r1, [pc, #176]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ce:	d105      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d0:	4b27      	ldr	r3, [pc, #156]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a26      	ldr	r2, [pc, #152]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036e8:	4b21      	ldr	r3, [pc, #132]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	491e      	ldr	r1, [pc, #120]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003706:	d105      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003708:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a18      	ldr	r2, [pc, #96]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800370e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003712:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d015      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003720:	4b13      	ldr	r3, [pc, #76]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4910      	ldr	r1, [pc, #64]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800373e:	d105      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800374a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d018      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	4902      	ldr	r1, [pc, #8]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800376e:	e001      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003770:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800377c:	d105      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800377e:	4b21      	ldr	r3, [pc, #132]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	4a20      	ldr	r2, [pc, #128]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d015      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003796:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a4:	4917      	ldr	r1, [pc, #92]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b4:	d105      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037b6:	4b13      	ldr	r3, [pc, #76]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d015      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80037d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037dc:	4909      	ldr	r1, [pc, #36]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ec:	d105      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80037f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80037fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40021000 	.word	0x40021000

08003808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e09d      	b.n	8003956 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800382a:	d009      	beq.n	8003840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
 8003832:	e005      	b.n	8003840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fd ff16 	bl	800168c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003876:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003880:	d902      	bls.n	8003888 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e002      	b.n	800388e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003896:	d007      	beq.n	80038a8 <HAL_SPI_Init+0xa0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038a0:	d002      	beq.n	80038a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ea:	ea42 0103 	orr.w	r1, r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	f003 0204 	and.w	r2, r3, #4
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003924:	ea42 0103 	orr.w	r1, r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b088      	sub	sp, #32
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_SPI_Transmit+0x22>
 800397c:	2302      	movs	r3, #2
 800397e:	e158      	b.n	8003c32 <HAL_SPI_Transmit+0x2d4>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003988:	f7fe fc0e 	bl	80021a8 <HAL_GetTick>
 800398c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b01      	cmp	r3, #1
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800399e:	2302      	movs	r3, #2
 80039a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039a2:	e13d      	b.n	8003c20 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_SPI_Transmit+0x52>
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039b4:	e134      	b.n	8003c20 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2203      	movs	r2, #3
 80039ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	88fa      	ldrh	r2, [r7, #6]
 80039ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a00:	d10f      	bne.n	8003a22 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d007      	beq.n	8003a40 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a48:	d94b      	bls.n	8003ae2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_SPI_Transmit+0xfa>
 8003a52:	8afb      	ldrh	r3, [r7, #22]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d13e      	bne.n	8003ad6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	881a      	ldrh	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	1c9a      	adds	r2, r3, #2
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a7c:	e02b      	b.n	8003ad6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d112      	bne.n	8003ab2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	881a      	ldrh	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	1c9a      	adds	r2, r3, #2
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ab0:	e011      	b.n	8003ad6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab2:	f7fe fb79 	bl	80021a8 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d803      	bhi.n	8003aca <HAL_SPI_Transmit+0x16c>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d102      	bne.n	8003ad0 <HAL_SPI_Transmit+0x172>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d102      	bne.n	8003ad6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ad4:	e0a4      	b.n	8003c20 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ce      	bne.n	8003a7e <HAL_SPI_Transmit+0x120>
 8003ae0:	e07c      	b.n	8003bdc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_SPI_Transmit+0x192>
 8003aea:	8afb      	ldrh	r3, [r7, #22]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d170      	bne.n	8003bd2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d912      	bls.n	8003b20 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	881a      	ldrh	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	1c9a      	adds	r2, r3, #2
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b02      	subs	r3, #2
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b1e:	e058      	b.n	8003bd2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	330c      	adds	r3, #12
 8003b2a:	7812      	ldrb	r2, [r2, #0]
 8003b2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b46:	e044      	b.n	8003bd2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d12b      	bne.n	8003bae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d912      	bls.n	8003b86 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	1c9a      	adds	r2, r3, #2
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b02      	subs	r3, #2
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b84:	e025      	b.n	8003bd2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	330c      	adds	r3, #12
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bac:	e011      	b.n	8003bd2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bae:	f7fe fafb 	bl	80021a8 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d803      	bhi.n	8003bc6 <HAL_SPI_Transmit+0x268>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d102      	bne.n	8003bcc <HAL_SPI_Transmit+0x26e>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bd0:	e026      	b.n	8003c20 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1b5      	bne.n	8003b48 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	6839      	ldr	r1, [r7, #0]
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fcdf 	bl	80045a4 <SPI_EndRxTxTransaction>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e000      	b.n	8003c20 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003c1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b088      	sub	sp, #32
 8003c3e:	af02      	add	r7, sp, #8
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c56:	d112      	bne.n	8003c7e <HAL_SPI_Receive+0x44>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10e      	bne.n	8003c7e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2204      	movs	r2, #4
 8003c64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f910 	bl	8003e9a <HAL_SPI_TransmitReceive>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	e109      	b.n	8003e92 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_SPI_Receive+0x52>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e102      	b.n	8003e92 <HAL_SPI_Receive+0x258>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c94:	f7fe fa88 	bl	80021a8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d002      	beq.n	8003cac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003caa:	e0e9      	b.n	8003e80 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_Receive+0x7e>
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cbc:	e0e0      	b.n	8003e80 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	88fa      	ldrh	r2, [r7, #6]
 8003cde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d08:	d908      	bls.n	8003d1c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	e007      	b.n	8003d2c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d2a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d34:	d10f      	bne.n	8003d56 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d007      	beq.n	8003d74 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d7c:	d867      	bhi.n	8003e4e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d7e:	e030      	b.n	8003de2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d117      	bne.n	8003dbe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f103 020c 	add.w	r2, r3, #12
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	7812      	ldrb	r2, [r2, #0]
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003dbc:	e011      	b.n	8003de2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dbe:	f7fe f9f3 	bl	80021a8 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d803      	bhi.n	8003dd6 <HAL_SPI_Receive+0x19c>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d102      	bne.n	8003ddc <HAL_SPI_Receive+0x1a2>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003de0:	e04e      	b.n	8003e80 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1c8      	bne.n	8003d80 <HAL_SPI_Receive+0x146>
 8003dee:	e034      	b.n	8003e5a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d115      	bne.n	8003e2a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	1c9a      	adds	r2, r3, #2
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003e28:	e011      	b.n	8003e4e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e2a:	f7fe f9bd 	bl	80021a8 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d803      	bhi.n	8003e42 <HAL_SPI_Receive+0x208>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d102      	bne.n	8003e48 <HAL_SPI_Receive+0x20e>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e4c:	e018      	b.n	8003e80 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1ca      	bne.n	8003df0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fb48 	bl	80044f4 <SPI_EndRxTransaction>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
 8003e7c:	e000      	b.n	8003e80 <HAL_SPI_Receive+0x246>
  }

error :
 8003e7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b08a      	sub	sp, #40	; 0x28
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x26>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e1fb      	b.n	80042b8 <HAL_SPI_TransmitReceive+0x41e>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ec8:	f7fe f96e 	bl	80021a8 <HAL_GetTick>
 8003ecc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ed4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003edc:	887b      	ldrh	r3, [r7, #2]
 8003ede:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003ee0:	887b      	ldrh	r3, [r7, #2]
 8003ee2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ee4:	7efb      	ldrb	r3, [r7, #27]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d00e      	beq.n	8003f08 <HAL_SPI_TransmitReceive+0x6e>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef0:	d106      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d102      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x66>
 8003efa:	7efb      	ldrb	r3, [r7, #27]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d003      	beq.n	8003f08 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f06:	e1cd      	b.n	80042a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_SPI_TransmitReceive+0x80>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_SPI_TransmitReceive+0x80>
 8003f14:	887b      	ldrh	r3, [r7, #2]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d103      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f20:	e1c0      	b.n	80042a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d003      	beq.n	8003f36 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2205      	movs	r2, #5
 8003f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	887a      	ldrh	r2, [r7, #2]
 8003f46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	887a      	ldrh	r2, [r7, #2]
 8003f4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	887a      	ldrh	r2, [r7, #2]
 8003f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	887a      	ldrh	r2, [r7, #2]
 8003f62:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f78:	d802      	bhi.n	8003f80 <HAL_SPI_TransmitReceive+0xe6>
 8003f7a:	8a3b      	ldrh	r3, [r7, #16]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d908      	bls.n	8003f92 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	e007      	b.n	8003fa2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fa0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d007      	beq.n	8003fc0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fc8:	d97c      	bls.n	80040c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x13e>
 8003fd2:	8a7b      	ldrh	r3, [r7, #18]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d169      	bne.n	80040ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	881a      	ldrh	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ffc:	e056      	b.n	80040ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b02      	cmp	r3, #2
 800400a:	d11b      	bne.n	8004044 <HAL_SPI_TransmitReceive+0x1aa>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <HAL_SPI_TransmitReceive+0x1aa>
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	2b01      	cmp	r3, #1
 800401a:	d113      	bne.n	8004044 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	881a      	ldrh	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	1c9a      	adds	r2, r3, #2
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b01      	cmp	r3, #1
 8004050:	d11c      	bne.n	800408c <HAL_SPI_TransmitReceive+0x1f2>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d016      	beq.n	800408c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	b292      	uxth	r2, r2
 800406a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	1c9a      	adds	r2, r3, #2
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004088:	2301      	movs	r3, #1
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800408c:	f7fe f88c 	bl	80021a8 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004098:	429a      	cmp	r2, r3
 800409a:	d807      	bhi.n	80040ac <HAL_SPI_TransmitReceive+0x212>
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d003      	beq.n	80040ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040aa:	e0fb      	b.n	80042a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1a3      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x164>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d19d      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x164>
 80040c2:	e0df      	b.n	8004284 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_SPI_TransmitReceive+0x23a>
 80040cc:	8a7b      	ldrh	r3, [r7, #18]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	f040 80cb 	bne.w	800426a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d912      	bls.n	8004104 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	881a      	ldrh	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	1c9a      	adds	r2, r3, #2
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b02      	subs	r3, #2
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004102:	e0b2      	b.n	800426a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	7812      	ldrb	r2, [r2, #0]
 8004110:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800412a:	e09e      	b.n	800426a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b02      	cmp	r3, #2
 8004138:	d134      	bne.n	80041a4 <HAL_SPI_TransmitReceive+0x30a>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d02f      	beq.n	80041a4 <HAL_SPI_TransmitReceive+0x30a>
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	2b01      	cmp	r3, #1
 8004148:	d12c      	bne.n	80041a4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d912      	bls.n	800417a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	881a      	ldrh	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	1c9a      	adds	r2, r3, #2
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b02      	subs	r3, #2
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004178:	e012      	b.n	80041a0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d148      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x3aa>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d042      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d923      	bls.n	8004212 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	b292      	uxth	r2, r2
 80041d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	1c9a      	adds	r2, r3, #2
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b02      	subs	r3, #2
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d81f      	bhi.n	8004240 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800420e:	605a      	str	r2, [r3, #4]
 8004210:	e016      	b.n	8004240 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f103 020c 	add.w	r2, r3, #12
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	7812      	ldrb	r2, [r2, #0]
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004240:	2301      	movs	r3, #1
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004244:	f7fd ffb0 	bl	80021a8 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004250:	429a      	cmp	r2, r3
 8004252:	d803      	bhi.n	800425c <HAL_SPI_TransmitReceive+0x3c2>
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d102      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x3c8>
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004268:	e01c      	b.n	80042a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f af5b 	bne.w	800412c <HAL_SPI_TransmitReceive+0x292>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	f47f af54 	bne.w	800412c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f98b 	bl	80045a4 <SPI_EndRxTxTransaction>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d006      	beq.n	80042a2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	661a      	str	r2, [r3, #96]	; 0x60
 80042a0:	e000      	b.n	80042a4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80042a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3728      	adds	r7, #40	; 0x28
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042d0:	f7fd ff6a 	bl	80021a8 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	4413      	add	r3, r2
 80042de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042e0:	f7fd ff62 	bl	80021a8 <HAL_GetTick>
 80042e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042e6:	4b39      	ldr	r3, [pc, #228]	; (80043cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	015b      	lsls	r3, r3, #5
 80042ec:	0d1b      	lsrs	r3, r3, #20
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f6:	e054      	b.n	80043a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fe:	d050      	beq.n	80043a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004300:	f7fd ff52 	bl	80021a8 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	429a      	cmp	r2, r3
 800430e:	d902      	bls.n	8004316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d13d      	bne.n	8004392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432e:	d111      	bne.n	8004354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004338:	d004      	beq.n	8004344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004342:	d107      	bne.n	8004354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435c:	d10f      	bne.n	800437e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800437c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e017      	b.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	3b01      	subs	r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4013      	ands	r3, r2
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d19b      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000004 	.word	0x20000004

080043d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043de:	f7fd fee3 	bl	80021a8 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	4413      	add	r3, r2
 80043ec:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043ee:	f7fd fedb 	bl	80021a8 <HAL_GetTick>
 80043f2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043f4:	4b3e      	ldr	r3, [pc, #248]	; (80044f0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	00da      	lsls	r2, r3, #3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	0d1b      	lsrs	r3, r3, #20
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800440c:	e062      	b.n	80044d4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004414:	d109      	bne.n	800442a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d106      	bne.n	800442a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004428:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d050      	beq.n	80044d4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004432:	f7fd feb9 	bl	80021a8 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	429a      	cmp	r2, r3
 8004440:	d902      	bls.n	8004448 <SPI_WaitFifoStateUntilTimeout+0x78>
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d13d      	bne.n	80044c4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004456:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004460:	d111      	bne.n	8004486 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446a:	d004      	beq.n	8004476 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004474:	d107      	bne.n	8004486 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004484:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448e:	d10f      	bne.n	80044b0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e010      	b.n	80044e6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	3b01      	subs	r3, #1
 80044d2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4013      	ands	r3, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d194      	bne.n	800440e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000004 	.word	0x20000004

080044f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004508:	d111      	bne.n	800452e <SPI_EndRxTransaction+0x3a>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004512:	d004      	beq.n	800451e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451c:	d107      	bne.n	800452e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2200      	movs	r2, #0
 8004536:	2180      	movs	r1, #128	; 0x80
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff fec1 	bl	80042c0 <SPI_WaitFlagStateUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e023      	b.n	800459c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455c:	d11d      	bne.n	800459a <SPI_EndRxTransaction+0xa6>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004566:	d004      	beq.n	8004572 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004570:	d113      	bne.n	800459a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2200      	movs	r2, #0
 800457a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7ff ff26 	bl	80043d0 <SPI_WaitFifoStateUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458e:	f043 0220 	orr.w	r2, r3, #32
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e000      	b.n	800459c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7ff ff07 	bl	80043d0 <SPI_WaitFifoStateUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045cc:	f043 0220 	orr.w	r2, r3, #32
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e027      	b.n	8004628 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2200      	movs	r2, #0
 80045e0:	2180      	movs	r1, #128	; 0x80
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7ff fe6c 	bl	80042c0 <SPI_WaitFlagStateUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f2:	f043 0220 	orr.w	r2, r3, #32
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e014      	b.n	8004628 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2200      	movs	r2, #0
 8004606:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff fee0 	bl	80043d0 <SPI_WaitFifoStateUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461a:	f043 0220 	orr.w	r2, r3, #32
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e000      	b.n	8004628 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e042      	b.n	80046c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fc ffa3 	bl	80015a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2224      	movs	r2, #36	; 0x24
 800465e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8c2 	bl	80047fc <UART_SetConfig>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e022      	b.n	80046c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fb80 	bl	8004d90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800469e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fc07 	bl	8004ed4 <UART_CheckIdleState>
 80046c6:	4603      	mov	r3, r0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	f040 8083 	bne.w	80047f2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_UART_Transmit+0x28>
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e07b      	b.n	80047f4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_UART_Transmit+0x3a>
 8004706:	2302      	movs	r3, #2
 8004708:	e074      	b.n	80047f4 <HAL_UART_Transmit+0x124>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2221      	movs	r2, #33	; 0x21
 800471e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004722:	f7fd fd41 	bl	80021a8 <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	88fa      	ldrh	r2, [r7, #6]
 800472c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	88fa      	ldrh	r2, [r7, #6]
 8004734:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004740:	d108      	bne.n	8004754 <HAL_UART_Transmit+0x84>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d104      	bne.n	8004754 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	e003      	b.n	800475c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004758:	2300      	movs	r3, #0
 800475a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004764:	e02c      	b.n	80047c0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2200      	movs	r2, #0
 800476e:	2180      	movs	r1, #128	; 0x80
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 fbfa 	bl	8004f6a <UART_WaitOnFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e039      	b.n	80047f4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10b      	bne.n	800479e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004794:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	3302      	adds	r3, #2
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	e007      	b.n	80047ae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	3301      	adds	r3, #1
 80047ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1cc      	bne.n	8004766 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2200      	movs	r2, #0
 80047d4:	2140      	movs	r1, #64	; 0x40
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fbc7 	bl	8004f6a <UART_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e006      	b.n	80047f4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e000      	b.n	80047f4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
  }
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	b5b0      	push	{r4, r5, r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	4313      	orrs	r3, r2
 800481e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4bb1      	ldr	r3, [pc, #708]	; (8004aec <UART_SetConfig+0x2f0>)
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	69f9      	ldr	r1, [r7, #28]
 8004830:	430b      	orrs	r3, r1
 8004832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4aa6      	ldr	r2, [pc, #664]	; (8004af0 <UART_SetConfig+0x2f4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	4313      	orrs	r3, r2
 8004862:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800486e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	69f9      	ldr	r1, [r7, #28]
 8004878:	430b      	orrs	r3, r1
 800487a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	f023 010f 	bic.w	r1, r3, #15
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a97      	ldr	r2, [pc, #604]	; (8004af4 <UART_SetConfig+0x2f8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d120      	bne.n	80048de <UART_SetConfig+0xe2>
 800489c:	4b96      	ldr	r3, [pc, #600]	; (8004af8 <UART_SetConfig+0x2fc>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d816      	bhi.n	80048d8 <UART_SetConfig+0xdc>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <UART_SetConfig+0xb4>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048cd 	.word	0x080048cd
 80048b8:	080048c7 	.word	0x080048c7
 80048bc:	080048d3 	.word	0x080048d3
 80048c0:	2301      	movs	r3, #1
 80048c2:	76fb      	strb	r3, [r7, #27]
 80048c4:	e0e7      	b.n	8004a96 <UART_SetConfig+0x29a>
 80048c6:	2302      	movs	r3, #2
 80048c8:	76fb      	strb	r3, [r7, #27]
 80048ca:	e0e4      	b.n	8004a96 <UART_SetConfig+0x29a>
 80048cc:	2304      	movs	r3, #4
 80048ce:	76fb      	strb	r3, [r7, #27]
 80048d0:	e0e1      	b.n	8004a96 <UART_SetConfig+0x29a>
 80048d2:	2308      	movs	r3, #8
 80048d4:	76fb      	strb	r3, [r7, #27]
 80048d6:	e0de      	b.n	8004a96 <UART_SetConfig+0x29a>
 80048d8:	2310      	movs	r3, #16
 80048da:	76fb      	strb	r3, [r7, #27]
 80048dc:	e0db      	b.n	8004a96 <UART_SetConfig+0x29a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a86      	ldr	r2, [pc, #536]	; (8004afc <UART_SetConfig+0x300>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d132      	bne.n	800494e <UART_SetConfig+0x152>
 80048e8:	4b83      	ldr	r3, [pc, #524]	; (8004af8 <UART_SetConfig+0x2fc>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	d828      	bhi.n	8004948 <UART_SetConfig+0x14c>
 80048f6:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <UART_SetConfig+0x100>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	08004931 	.word	0x08004931
 8004900:	08004949 	.word	0x08004949
 8004904:	08004949 	.word	0x08004949
 8004908:	08004949 	.word	0x08004949
 800490c:	0800493d 	.word	0x0800493d
 8004910:	08004949 	.word	0x08004949
 8004914:	08004949 	.word	0x08004949
 8004918:	08004949 	.word	0x08004949
 800491c:	08004937 	.word	0x08004937
 8004920:	08004949 	.word	0x08004949
 8004924:	08004949 	.word	0x08004949
 8004928:	08004949 	.word	0x08004949
 800492c:	08004943 	.word	0x08004943
 8004930:	2300      	movs	r3, #0
 8004932:	76fb      	strb	r3, [r7, #27]
 8004934:	e0af      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004936:	2302      	movs	r3, #2
 8004938:	76fb      	strb	r3, [r7, #27]
 800493a:	e0ac      	b.n	8004a96 <UART_SetConfig+0x29a>
 800493c:	2304      	movs	r3, #4
 800493e:	76fb      	strb	r3, [r7, #27]
 8004940:	e0a9      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004942:	2308      	movs	r3, #8
 8004944:	76fb      	strb	r3, [r7, #27]
 8004946:	e0a6      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004948:	2310      	movs	r3, #16
 800494a:	76fb      	strb	r3, [r7, #27]
 800494c:	e0a3      	b.n	8004a96 <UART_SetConfig+0x29a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a6b      	ldr	r2, [pc, #428]	; (8004b00 <UART_SetConfig+0x304>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d120      	bne.n	800499a <UART_SetConfig+0x19e>
 8004958:	4b67      	ldr	r3, [pc, #412]	; (8004af8 <UART_SetConfig+0x2fc>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004962:	2b30      	cmp	r3, #48	; 0x30
 8004964:	d013      	beq.n	800498e <UART_SetConfig+0x192>
 8004966:	2b30      	cmp	r3, #48	; 0x30
 8004968:	d814      	bhi.n	8004994 <UART_SetConfig+0x198>
 800496a:	2b20      	cmp	r3, #32
 800496c:	d009      	beq.n	8004982 <UART_SetConfig+0x186>
 800496e:	2b20      	cmp	r3, #32
 8004970:	d810      	bhi.n	8004994 <UART_SetConfig+0x198>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <UART_SetConfig+0x180>
 8004976:	2b10      	cmp	r3, #16
 8004978:	d006      	beq.n	8004988 <UART_SetConfig+0x18c>
 800497a:	e00b      	b.n	8004994 <UART_SetConfig+0x198>
 800497c:	2300      	movs	r3, #0
 800497e:	76fb      	strb	r3, [r7, #27]
 8004980:	e089      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004982:	2302      	movs	r3, #2
 8004984:	76fb      	strb	r3, [r7, #27]
 8004986:	e086      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004988:	2304      	movs	r3, #4
 800498a:	76fb      	strb	r3, [r7, #27]
 800498c:	e083      	b.n	8004a96 <UART_SetConfig+0x29a>
 800498e:	2308      	movs	r3, #8
 8004990:	76fb      	strb	r3, [r7, #27]
 8004992:	e080      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004994:	2310      	movs	r3, #16
 8004996:	76fb      	strb	r3, [r7, #27]
 8004998:	e07d      	b.n	8004a96 <UART_SetConfig+0x29a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a59      	ldr	r2, [pc, #356]	; (8004b04 <UART_SetConfig+0x308>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d120      	bne.n	80049e6 <UART_SetConfig+0x1ea>
 80049a4:	4b54      	ldr	r3, [pc, #336]	; (8004af8 <UART_SetConfig+0x2fc>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049ae:	2bc0      	cmp	r3, #192	; 0xc0
 80049b0:	d013      	beq.n	80049da <UART_SetConfig+0x1de>
 80049b2:	2bc0      	cmp	r3, #192	; 0xc0
 80049b4:	d814      	bhi.n	80049e0 <UART_SetConfig+0x1e4>
 80049b6:	2b80      	cmp	r3, #128	; 0x80
 80049b8:	d009      	beq.n	80049ce <UART_SetConfig+0x1d2>
 80049ba:	2b80      	cmp	r3, #128	; 0x80
 80049bc:	d810      	bhi.n	80049e0 <UART_SetConfig+0x1e4>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <UART_SetConfig+0x1cc>
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d006      	beq.n	80049d4 <UART_SetConfig+0x1d8>
 80049c6:	e00b      	b.n	80049e0 <UART_SetConfig+0x1e4>
 80049c8:	2300      	movs	r3, #0
 80049ca:	76fb      	strb	r3, [r7, #27]
 80049cc:	e063      	b.n	8004a96 <UART_SetConfig+0x29a>
 80049ce:	2302      	movs	r3, #2
 80049d0:	76fb      	strb	r3, [r7, #27]
 80049d2:	e060      	b.n	8004a96 <UART_SetConfig+0x29a>
 80049d4:	2304      	movs	r3, #4
 80049d6:	76fb      	strb	r3, [r7, #27]
 80049d8:	e05d      	b.n	8004a96 <UART_SetConfig+0x29a>
 80049da:	2308      	movs	r3, #8
 80049dc:	76fb      	strb	r3, [r7, #27]
 80049de:	e05a      	b.n	8004a96 <UART_SetConfig+0x29a>
 80049e0:	2310      	movs	r3, #16
 80049e2:	76fb      	strb	r3, [r7, #27]
 80049e4:	e057      	b.n	8004a96 <UART_SetConfig+0x29a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a47      	ldr	r2, [pc, #284]	; (8004b08 <UART_SetConfig+0x30c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d125      	bne.n	8004a3c <UART_SetConfig+0x240>
 80049f0:	4b41      	ldr	r3, [pc, #260]	; (8004af8 <UART_SetConfig+0x2fc>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049fe:	d017      	beq.n	8004a30 <UART_SetConfig+0x234>
 8004a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a04:	d817      	bhi.n	8004a36 <UART_SetConfig+0x23a>
 8004a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0a:	d00b      	beq.n	8004a24 <UART_SetConfig+0x228>
 8004a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a10:	d811      	bhi.n	8004a36 <UART_SetConfig+0x23a>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <UART_SetConfig+0x222>
 8004a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1a:	d006      	beq.n	8004a2a <UART_SetConfig+0x22e>
 8004a1c:	e00b      	b.n	8004a36 <UART_SetConfig+0x23a>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	76fb      	strb	r3, [r7, #27]
 8004a22:	e038      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004a24:	2302      	movs	r3, #2
 8004a26:	76fb      	strb	r3, [r7, #27]
 8004a28:	e035      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	76fb      	strb	r3, [r7, #27]
 8004a2e:	e032      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004a30:	2308      	movs	r3, #8
 8004a32:	76fb      	strb	r3, [r7, #27]
 8004a34:	e02f      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004a36:	2310      	movs	r3, #16
 8004a38:	76fb      	strb	r3, [r7, #27]
 8004a3a:	e02c      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2b      	ldr	r2, [pc, #172]	; (8004af0 <UART_SetConfig+0x2f4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d125      	bne.n	8004a92 <UART_SetConfig+0x296>
 8004a46:	4b2c      	ldr	r3, [pc, #176]	; (8004af8 <UART_SetConfig+0x2fc>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a54:	d017      	beq.n	8004a86 <UART_SetConfig+0x28a>
 8004a56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a5a:	d817      	bhi.n	8004a8c <UART_SetConfig+0x290>
 8004a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a60:	d00b      	beq.n	8004a7a <UART_SetConfig+0x27e>
 8004a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a66:	d811      	bhi.n	8004a8c <UART_SetConfig+0x290>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <UART_SetConfig+0x278>
 8004a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a70:	d006      	beq.n	8004a80 <UART_SetConfig+0x284>
 8004a72:	e00b      	b.n	8004a8c <UART_SetConfig+0x290>
 8004a74:	2300      	movs	r3, #0
 8004a76:	76fb      	strb	r3, [r7, #27]
 8004a78:	e00d      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	76fb      	strb	r3, [r7, #27]
 8004a7e:	e00a      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004a80:	2304      	movs	r3, #4
 8004a82:	76fb      	strb	r3, [r7, #27]
 8004a84:	e007      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004a86:	2308      	movs	r3, #8
 8004a88:	76fb      	strb	r3, [r7, #27]
 8004a8a:	e004      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	76fb      	strb	r3, [r7, #27]
 8004a90:	e001      	b.n	8004a96 <UART_SetConfig+0x29a>
 8004a92:	2310      	movs	r3, #16
 8004a94:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <UART_SetConfig+0x2f4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	f040 809f 	bne.w	8004be0 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aa2:	7efb      	ldrb	r3, [r7, #27]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d837      	bhi.n	8004b18 <UART_SetConfig+0x31c>
 8004aa8:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x2b4>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004b19 	.word	0x08004b19
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004b19 	.word	0x08004b19
 8004ac0:	08004ae3 	.word	0x08004ae3
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004b19 	.word	0x08004b19
 8004acc:	08004b19 	.word	0x08004b19
 8004ad0:	08004b11 	.word	0x08004b11
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad4:	f7fe fbda 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8004ad8:	6178      	str	r0, [r7, #20]
        break;
 8004ada:	e022      	b.n	8004b22 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <UART_SetConfig+0x310>)
 8004ade:	617b      	str	r3, [r7, #20]
        break;
 8004ae0:	e01f      	b.n	8004b22 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae2:	f7fe fb65 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 8004ae6:	6178      	str	r0, [r7, #20]
        break;
 8004ae8:	e01b      	b.n	8004b22 <UART_SetConfig+0x326>
 8004aea:	bf00      	nop
 8004aec:	cfff69f3 	.word	0xcfff69f3
 8004af0:	40008000 	.word	0x40008000
 8004af4:	40013800 	.word	0x40013800
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40004400 	.word	0x40004400
 8004b00:	40004800 	.word	0x40004800
 8004b04:	40004c00 	.word	0x40004c00
 8004b08:	40005000 	.word	0x40005000
 8004b0c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b14:	617b      	str	r3, [r7, #20]
        break;
 8004b16:	e004      	b.n	8004b22 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	76bb      	strb	r3, [r7, #26]
        break;
 8004b20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 811b 	beq.w	8004d60 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	4a96      	ldr	r2, [pc, #600]	; (8004d88 <UART_SetConfig+0x58c>)
 8004b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b34:	461a      	mov	r2, r3
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b3c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d305      	bcc.n	8004b5a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d902      	bls.n	8004b60 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	76bb      	strb	r3, [r7, #26]
 8004b5e:	e0ff      	b.n	8004d60 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	4a86      	ldr	r2, [pc, #536]	; (8004d88 <UART_SetConfig+0x58c>)
 8004b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	f7fb fbaa 	bl	80002d0 <__aeabi_uldivmod>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	020b      	lsls	r3, r1, #8
 8004b8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b92:	0202      	lsls	r2, r0, #8
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	6849      	ldr	r1, [r1, #4]
 8004b98:	0849      	lsrs	r1, r1, #1
 8004b9a:	4608      	mov	r0, r1
 8004b9c:	f04f 0100 	mov.w	r1, #0
 8004ba0:	1814      	adds	r4, r2, r0
 8004ba2:	eb43 0501 	adc.w	r5, r3, r1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	461a      	mov	r2, r3
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	f7fb fb8c 	bl	80002d0 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc6:	d308      	bcc.n	8004bda <UART_SetConfig+0x3de>
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bce:	d204      	bcs.n	8004bda <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	60da      	str	r2, [r3, #12]
 8004bd8:	e0c2      	b.n	8004d60 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	76bb      	strb	r3, [r7, #26]
 8004bde:	e0bf      	b.n	8004d60 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be8:	d165      	bne.n	8004cb6 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8004bea:	7efb      	ldrb	r3, [r7, #27]
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d828      	bhi.n	8004c42 <UART_SetConfig+0x446>
 8004bf0:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <UART_SetConfig+0x3fc>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c1d 	.word	0x08004c1d
 8004bfc:	08004c25 	.word	0x08004c25
 8004c00:	08004c2d 	.word	0x08004c2d
 8004c04:	08004c43 	.word	0x08004c43
 8004c08:	08004c33 	.word	0x08004c33
 8004c0c:	08004c43 	.word	0x08004c43
 8004c10:	08004c43 	.word	0x08004c43
 8004c14:	08004c43 	.word	0x08004c43
 8004c18:	08004c3b 	.word	0x08004c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c1c:	f7fe fb36 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8004c20:	6178      	str	r0, [r7, #20]
        break;
 8004c22:	e013      	b.n	8004c4c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c24:	f7fe fb48 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 8004c28:	6178      	str	r0, [r7, #20]
        break;
 8004c2a:	e00f      	b.n	8004c4c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c2c:	4b57      	ldr	r3, [pc, #348]	; (8004d8c <UART_SetConfig+0x590>)
 8004c2e:	617b      	str	r3, [r7, #20]
        break;
 8004c30:	e00c      	b.n	8004c4c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c32:	f7fe fabd 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 8004c36:	6178      	str	r0, [r7, #20]
        break;
 8004c38:	e008      	b.n	8004c4c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3e:	617b      	str	r3, [r7, #20]
        break;
 8004c40:	e004      	b.n	8004c4c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	76bb      	strb	r3, [r7, #26]
        break;
 8004c4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8086 	beq.w	8004d60 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	4a4b      	ldr	r2, [pc, #300]	; (8004d88 <UART_SetConfig+0x58c>)
 8004c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c66:	005a      	lsls	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	441a      	add	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b0f      	cmp	r3, #15
 8004c80:	d916      	bls.n	8004cb0 <UART_SetConfig+0x4b4>
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c88:	d212      	bcs.n	8004cb0 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f023 030f 	bic.w	r3, r3, #15
 8004c92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	89fb      	ldrh	r3, [r7, #14]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	89fa      	ldrh	r2, [r7, #14]
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	e057      	b.n	8004d60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	76bb      	strb	r3, [r7, #26]
 8004cb4:	e054      	b.n	8004d60 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cb6:	7efb      	ldrb	r3, [r7, #27]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d828      	bhi.n	8004d0e <UART_SetConfig+0x512>
 8004cbc:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <UART_SetConfig+0x4c8>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004cf9 	.word	0x08004cf9
 8004cd0:	08004d0f 	.word	0x08004d0f
 8004cd4:	08004cff 	.word	0x08004cff
 8004cd8:	08004d0f 	.word	0x08004d0f
 8004cdc:	08004d0f 	.word	0x08004d0f
 8004ce0:	08004d0f 	.word	0x08004d0f
 8004ce4:	08004d07 	.word	0x08004d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce8:	f7fe fad0 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8004cec:	6178      	str	r0, [r7, #20]
        break;
 8004cee:	e013      	b.n	8004d18 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf0:	f7fe fae2 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 8004cf4:	6178      	str	r0, [r7, #20]
        break;
 8004cf6:	e00f      	b.n	8004d18 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf8:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <UART_SetConfig+0x590>)
 8004cfa:	617b      	str	r3, [r7, #20]
        break;
 8004cfc:	e00c      	b.n	8004d18 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfe:	f7fe fa57 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 8004d02:	6178      	str	r0, [r7, #20]
        break;
 8004d04:	e008      	b.n	8004d18 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d0a:	617b      	str	r3, [r7, #20]
        break;
 8004d0c:	e004      	b.n	8004d18 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	76bb      	strb	r3, [r7, #26]
        break;
 8004d16:	bf00      	nop
    }

    if (pclk != 0U)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d020      	beq.n	8004d60 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	4a19      	ldr	r2, [pc, #100]	; (8004d88 <UART_SetConfig+0x58c>)
 8004d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	441a      	add	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2b0f      	cmp	r3, #15
 8004d48:	d908      	bls.n	8004d5c <UART_SetConfig+0x560>
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d50:	d204      	bcs.n	8004d5c <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	60da      	str	r2, [r3, #12]
 8004d5a:	e001      	b.n	8004d60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d7c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3720      	adds	r7, #32
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bdb0      	pop	{r4, r5, r7, pc}
 8004d86:	bf00      	nop
 8004d88:	08005c28 	.word	0x08005c28
 8004d8c:	00f42400 	.word	0x00f42400

08004d90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8e:	d10a      	bne.n	8004ea6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ee4:	f7fd f960 	bl	80021a8 <HAL_GetTick>
 8004ee8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d10e      	bne.n	8004f16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f82f 	bl	8004f6a <UART_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e025      	b.n	8004f62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d10e      	bne.n	8004f42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f819 	bl	8004f6a <UART_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e00f      	b.n	8004f62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	603b      	str	r3, [r7, #0]
 8004f76:	4613      	mov	r3, r2
 8004f78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7a:	e062      	b.n	8005042 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f82:	d05e      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f84:	f7fd f910 	bl	80021a8 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d302      	bcc.n	8004f9a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d11d      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fa8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e045      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d02e      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff2:	d126      	bne.n	8005042 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ffc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800500c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2220      	movs	r2, #32
 800502a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e00f      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4013      	ands	r3, r2
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	429a      	cmp	r2, r3
 8005050:	bf0c      	ite	eq
 8005052:	2301      	moveq	r3, #1
 8005054:	2300      	movne	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	429a      	cmp	r2, r3
 800505e:	d08d      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_UARTEx_DisableFifoMode+0x16>
 800507c:	2302      	movs	r3, #2
 800507e:	e027      	b.n	80050d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2224      	movs	r2, #36	; 0x24
 800508c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e02d      	b.n	8005150 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2224      	movs	r2, #36	; 0x24
 8005100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0201 	bic.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f84f 	bl	80051d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e02d      	b.n	80051cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2224      	movs	r2, #36	; 0x24
 800517c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f811 	bl	80051d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d108      	bne.n	80051f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051f4:	e031      	b.n	800525a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051f6:	2308      	movs	r3, #8
 80051f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051fa:	2308      	movs	r3, #8
 80051fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	0e5b      	lsrs	r3, r3, #25
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	0f5b      	lsrs	r3, r3, #29
 8005216:	b2db      	uxtb	r3, r3
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800521e:	7bbb      	ldrb	r3, [r7, #14]
 8005220:	7b3a      	ldrb	r2, [r7, #12]
 8005222:	4911      	ldr	r1, [pc, #68]	; (8005268 <UARTEx_SetNbDataToProcess+0x94>)
 8005224:	5c8a      	ldrb	r2, [r1, r2]
 8005226:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800522a:	7b3a      	ldrb	r2, [r7, #12]
 800522c:	490f      	ldr	r1, [pc, #60]	; (800526c <UARTEx_SetNbDataToProcess+0x98>)
 800522e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005230:	fb93 f3f2 	sdiv	r3, r3, r2
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	7b7a      	ldrb	r2, [r7, #13]
 8005240:	4909      	ldr	r1, [pc, #36]	; (8005268 <UARTEx_SetNbDataToProcess+0x94>)
 8005242:	5c8a      	ldrb	r2, [r1, r2]
 8005244:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005248:	7b7a      	ldrb	r2, [r7, #13]
 800524a:	4908      	ldr	r1, [pc, #32]	; (800526c <UARTEx_SetNbDataToProcess+0x98>)
 800524c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800524e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005252:	b29a      	uxth	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	08005c40 	.word	0x08005c40
 800526c:	08005c48 	.word	0x08005c48

08005270 <__errno>:
 8005270:	4b01      	ldr	r3, [pc, #4]	; (8005278 <__errno+0x8>)
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	2000003c 	.word	0x2000003c

0800527c <__libc_init_array>:
 800527c:	b570      	push	{r4, r5, r6, lr}
 800527e:	4d0d      	ldr	r5, [pc, #52]	; (80052b4 <__libc_init_array+0x38>)
 8005280:	4c0d      	ldr	r4, [pc, #52]	; (80052b8 <__libc_init_array+0x3c>)
 8005282:	1b64      	subs	r4, r4, r5
 8005284:	10a4      	asrs	r4, r4, #2
 8005286:	2600      	movs	r6, #0
 8005288:	42a6      	cmp	r6, r4
 800528a:	d109      	bne.n	80052a0 <__libc_init_array+0x24>
 800528c:	4d0b      	ldr	r5, [pc, #44]	; (80052bc <__libc_init_array+0x40>)
 800528e:	4c0c      	ldr	r4, [pc, #48]	; (80052c0 <__libc_init_array+0x44>)
 8005290:	f000 fc4e 	bl	8005b30 <_init>
 8005294:	1b64      	subs	r4, r4, r5
 8005296:	10a4      	asrs	r4, r4, #2
 8005298:	2600      	movs	r6, #0
 800529a:	42a6      	cmp	r6, r4
 800529c:	d105      	bne.n	80052aa <__libc_init_array+0x2e>
 800529e:	bd70      	pop	{r4, r5, r6, pc}
 80052a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a4:	4798      	blx	r3
 80052a6:	3601      	adds	r6, #1
 80052a8:	e7ee      	b.n	8005288 <__libc_init_array+0xc>
 80052aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ae:	4798      	blx	r3
 80052b0:	3601      	adds	r6, #1
 80052b2:	e7f2      	b.n	800529a <__libc_init_array+0x1e>
 80052b4:	08005c8c 	.word	0x08005c8c
 80052b8:	08005c8c 	.word	0x08005c8c
 80052bc:	08005c8c 	.word	0x08005c8c
 80052c0:	08005c90 	.word	0x08005c90

080052c4 <memset>:
 80052c4:	4402      	add	r2, r0
 80052c6:	4603      	mov	r3, r0
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d100      	bne.n	80052ce <memset+0xa>
 80052cc:	4770      	bx	lr
 80052ce:	f803 1b01 	strb.w	r1, [r3], #1
 80052d2:	e7f9      	b.n	80052c8 <memset+0x4>

080052d4 <siprintf>:
 80052d4:	b40e      	push	{r1, r2, r3}
 80052d6:	b500      	push	{lr}
 80052d8:	b09c      	sub	sp, #112	; 0x70
 80052da:	ab1d      	add	r3, sp, #116	; 0x74
 80052dc:	9002      	str	r0, [sp, #8]
 80052de:	9006      	str	r0, [sp, #24]
 80052e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052e4:	4809      	ldr	r0, [pc, #36]	; (800530c <siprintf+0x38>)
 80052e6:	9107      	str	r1, [sp, #28]
 80052e8:	9104      	str	r1, [sp, #16]
 80052ea:	4909      	ldr	r1, [pc, #36]	; (8005310 <siprintf+0x3c>)
 80052ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80052f0:	9105      	str	r1, [sp, #20]
 80052f2:	6800      	ldr	r0, [r0, #0]
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	a902      	add	r1, sp, #8
 80052f8:	f000 f868 	bl	80053cc <_svfiprintf_r>
 80052fc:	9b02      	ldr	r3, [sp, #8]
 80052fe:	2200      	movs	r2, #0
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	b01c      	add	sp, #112	; 0x70
 8005304:	f85d eb04 	ldr.w	lr, [sp], #4
 8005308:	b003      	add	sp, #12
 800530a:	4770      	bx	lr
 800530c:	2000003c 	.word	0x2000003c
 8005310:	ffff0208 	.word	0xffff0208

08005314 <__ssputs_r>:
 8005314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005318:	688e      	ldr	r6, [r1, #8]
 800531a:	429e      	cmp	r6, r3
 800531c:	4682      	mov	sl, r0
 800531e:	460c      	mov	r4, r1
 8005320:	4690      	mov	r8, r2
 8005322:	461f      	mov	r7, r3
 8005324:	d838      	bhi.n	8005398 <__ssputs_r+0x84>
 8005326:	898a      	ldrh	r2, [r1, #12]
 8005328:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800532c:	d032      	beq.n	8005394 <__ssputs_r+0x80>
 800532e:	6825      	ldr	r5, [r4, #0]
 8005330:	6909      	ldr	r1, [r1, #16]
 8005332:	eba5 0901 	sub.w	r9, r5, r1
 8005336:	6965      	ldr	r5, [r4, #20]
 8005338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800533c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005340:	3301      	adds	r3, #1
 8005342:	444b      	add	r3, r9
 8005344:	106d      	asrs	r5, r5, #1
 8005346:	429d      	cmp	r5, r3
 8005348:	bf38      	it	cc
 800534a:	461d      	movcc	r5, r3
 800534c:	0553      	lsls	r3, r2, #21
 800534e:	d531      	bpl.n	80053b4 <__ssputs_r+0xa0>
 8005350:	4629      	mov	r1, r5
 8005352:	f000 fb47 	bl	80059e4 <_malloc_r>
 8005356:	4606      	mov	r6, r0
 8005358:	b950      	cbnz	r0, 8005370 <__ssputs_r+0x5c>
 800535a:	230c      	movs	r3, #12
 800535c:	f8ca 3000 	str.w	r3, [sl]
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005366:	81a3      	strh	r3, [r4, #12]
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005370:	6921      	ldr	r1, [r4, #16]
 8005372:	464a      	mov	r2, r9
 8005374:	f000 fabe 	bl	80058f4 <memcpy>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	6126      	str	r6, [r4, #16]
 8005386:	6165      	str	r5, [r4, #20]
 8005388:	444e      	add	r6, r9
 800538a:	eba5 0509 	sub.w	r5, r5, r9
 800538e:	6026      	str	r6, [r4, #0]
 8005390:	60a5      	str	r5, [r4, #8]
 8005392:	463e      	mov	r6, r7
 8005394:	42be      	cmp	r6, r7
 8005396:	d900      	bls.n	800539a <__ssputs_r+0x86>
 8005398:	463e      	mov	r6, r7
 800539a:	4632      	mov	r2, r6
 800539c:	6820      	ldr	r0, [r4, #0]
 800539e:	4641      	mov	r1, r8
 80053a0:	f000 fab6 	bl	8005910 <memmove>
 80053a4:	68a3      	ldr	r3, [r4, #8]
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	1b9b      	subs	r3, r3, r6
 80053aa:	4432      	add	r2, r6
 80053ac:	60a3      	str	r3, [r4, #8]
 80053ae:	6022      	str	r2, [r4, #0]
 80053b0:	2000      	movs	r0, #0
 80053b2:	e7db      	b.n	800536c <__ssputs_r+0x58>
 80053b4:	462a      	mov	r2, r5
 80053b6:	f000 fb6f 	bl	8005a98 <_realloc_r>
 80053ba:	4606      	mov	r6, r0
 80053bc:	2800      	cmp	r0, #0
 80053be:	d1e1      	bne.n	8005384 <__ssputs_r+0x70>
 80053c0:	6921      	ldr	r1, [r4, #16]
 80053c2:	4650      	mov	r0, sl
 80053c4:	f000 fabe 	bl	8005944 <_free_r>
 80053c8:	e7c7      	b.n	800535a <__ssputs_r+0x46>
	...

080053cc <_svfiprintf_r>:
 80053cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	4698      	mov	r8, r3
 80053d2:	898b      	ldrh	r3, [r1, #12]
 80053d4:	061b      	lsls	r3, r3, #24
 80053d6:	b09d      	sub	sp, #116	; 0x74
 80053d8:	4607      	mov	r7, r0
 80053da:	460d      	mov	r5, r1
 80053dc:	4614      	mov	r4, r2
 80053de:	d50e      	bpl.n	80053fe <_svfiprintf_r+0x32>
 80053e0:	690b      	ldr	r3, [r1, #16]
 80053e2:	b963      	cbnz	r3, 80053fe <_svfiprintf_r+0x32>
 80053e4:	2140      	movs	r1, #64	; 0x40
 80053e6:	f000 fafd 	bl	80059e4 <_malloc_r>
 80053ea:	6028      	str	r0, [r5, #0]
 80053ec:	6128      	str	r0, [r5, #16]
 80053ee:	b920      	cbnz	r0, 80053fa <_svfiprintf_r+0x2e>
 80053f0:	230c      	movs	r3, #12
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	e0d1      	b.n	800559e <_svfiprintf_r+0x1d2>
 80053fa:	2340      	movs	r3, #64	; 0x40
 80053fc:	616b      	str	r3, [r5, #20]
 80053fe:	2300      	movs	r3, #0
 8005400:	9309      	str	r3, [sp, #36]	; 0x24
 8005402:	2320      	movs	r3, #32
 8005404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005408:	f8cd 800c 	str.w	r8, [sp, #12]
 800540c:	2330      	movs	r3, #48	; 0x30
 800540e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055b8 <_svfiprintf_r+0x1ec>
 8005412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005416:	f04f 0901 	mov.w	r9, #1
 800541a:	4623      	mov	r3, r4
 800541c:	469a      	mov	sl, r3
 800541e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005422:	b10a      	cbz	r2, 8005428 <_svfiprintf_r+0x5c>
 8005424:	2a25      	cmp	r2, #37	; 0x25
 8005426:	d1f9      	bne.n	800541c <_svfiprintf_r+0x50>
 8005428:	ebba 0b04 	subs.w	fp, sl, r4
 800542c:	d00b      	beq.n	8005446 <_svfiprintf_r+0x7a>
 800542e:	465b      	mov	r3, fp
 8005430:	4622      	mov	r2, r4
 8005432:	4629      	mov	r1, r5
 8005434:	4638      	mov	r0, r7
 8005436:	f7ff ff6d 	bl	8005314 <__ssputs_r>
 800543a:	3001      	adds	r0, #1
 800543c:	f000 80aa 	beq.w	8005594 <_svfiprintf_r+0x1c8>
 8005440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005442:	445a      	add	r2, fp
 8005444:	9209      	str	r2, [sp, #36]	; 0x24
 8005446:	f89a 3000 	ldrb.w	r3, [sl]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 80a2 	beq.w	8005594 <_svfiprintf_r+0x1c8>
 8005450:	2300      	movs	r3, #0
 8005452:	f04f 32ff 	mov.w	r2, #4294967295
 8005456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800545a:	f10a 0a01 	add.w	sl, sl, #1
 800545e:	9304      	str	r3, [sp, #16]
 8005460:	9307      	str	r3, [sp, #28]
 8005462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005466:	931a      	str	r3, [sp, #104]	; 0x68
 8005468:	4654      	mov	r4, sl
 800546a:	2205      	movs	r2, #5
 800546c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005470:	4851      	ldr	r0, [pc, #324]	; (80055b8 <_svfiprintf_r+0x1ec>)
 8005472:	f7fa fedd 	bl	8000230 <memchr>
 8005476:	9a04      	ldr	r2, [sp, #16]
 8005478:	b9d8      	cbnz	r0, 80054b2 <_svfiprintf_r+0xe6>
 800547a:	06d0      	lsls	r0, r2, #27
 800547c:	bf44      	itt	mi
 800547e:	2320      	movmi	r3, #32
 8005480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005484:	0711      	lsls	r1, r2, #28
 8005486:	bf44      	itt	mi
 8005488:	232b      	movmi	r3, #43	; 0x2b
 800548a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800548e:	f89a 3000 	ldrb.w	r3, [sl]
 8005492:	2b2a      	cmp	r3, #42	; 0x2a
 8005494:	d015      	beq.n	80054c2 <_svfiprintf_r+0xf6>
 8005496:	9a07      	ldr	r2, [sp, #28]
 8005498:	4654      	mov	r4, sl
 800549a:	2000      	movs	r0, #0
 800549c:	f04f 0c0a 	mov.w	ip, #10
 80054a0:	4621      	mov	r1, r4
 80054a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054a6:	3b30      	subs	r3, #48	; 0x30
 80054a8:	2b09      	cmp	r3, #9
 80054aa:	d94e      	bls.n	800554a <_svfiprintf_r+0x17e>
 80054ac:	b1b0      	cbz	r0, 80054dc <_svfiprintf_r+0x110>
 80054ae:	9207      	str	r2, [sp, #28]
 80054b0:	e014      	b.n	80054dc <_svfiprintf_r+0x110>
 80054b2:	eba0 0308 	sub.w	r3, r0, r8
 80054b6:	fa09 f303 	lsl.w	r3, r9, r3
 80054ba:	4313      	orrs	r3, r2
 80054bc:	9304      	str	r3, [sp, #16]
 80054be:	46a2      	mov	sl, r4
 80054c0:	e7d2      	b.n	8005468 <_svfiprintf_r+0x9c>
 80054c2:	9b03      	ldr	r3, [sp, #12]
 80054c4:	1d19      	adds	r1, r3, #4
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	9103      	str	r1, [sp, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bfbb      	ittet	lt
 80054ce:	425b      	neglt	r3, r3
 80054d0:	f042 0202 	orrlt.w	r2, r2, #2
 80054d4:	9307      	strge	r3, [sp, #28]
 80054d6:	9307      	strlt	r3, [sp, #28]
 80054d8:	bfb8      	it	lt
 80054da:	9204      	strlt	r2, [sp, #16]
 80054dc:	7823      	ldrb	r3, [r4, #0]
 80054de:	2b2e      	cmp	r3, #46	; 0x2e
 80054e0:	d10c      	bne.n	80054fc <_svfiprintf_r+0x130>
 80054e2:	7863      	ldrb	r3, [r4, #1]
 80054e4:	2b2a      	cmp	r3, #42	; 0x2a
 80054e6:	d135      	bne.n	8005554 <_svfiprintf_r+0x188>
 80054e8:	9b03      	ldr	r3, [sp, #12]
 80054ea:	1d1a      	adds	r2, r3, #4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	9203      	str	r2, [sp, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	bfb8      	it	lt
 80054f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80054f8:	3402      	adds	r4, #2
 80054fa:	9305      	str	r3, [sp, #20]
 80054fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055c8 <_svfiprintf_r+0x1fc>
 8005500:	7821      	ldrb	r1, [r4, #0]
 8005502:	2203      	movs	r2, #3
 8005504:	4650      	mov	r0, sl
 8005506:	f7fa fe93 	bl	8000230 <memchr>
 800550a:	b140      	cbz	r0, 800551e <_svfiprintf_r+0x152>
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	eba0 000a 	sub.w	r0, r0, sl
 8005512:	fa03 f000 	lsl.w	r0, r3, r0
 8005516:	9b04      	ldr	r3, [sp, #16]
 8005518:	4303      	orrs	r3, r0
 800551a:	3401      	adds	r4, #1
 800551c:	9304      	str	r3, [sp, #16]
 800551e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005522:	4826      	ldr	r0, [pc, #152]	; (80055bc <_svfiprintf_r+0x1f0>)
 8005524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005528:	2206      	movs	r2, #6
 800552a:	f7fa fe81 	bl	8000230 <memchr>
 800552e:	2800      	cmp	r0, #0
 8005530:	d038      	beq.n	80055a4 <_svfiprintf_r+0x1d8>
 8005532:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <_svfiprintf_r+0x1f4>)
 8005534:	bb1b      	cbnz	r3, 800557e <_svfiprintf_r+0x1b2>
 8005536:	9b03      	ldr	r3, [sp, #12]
 8005538:	3307      	adds	r3, #7
 800553a:	f023 0307 	bic.w	r3, r3, #7
 800553e:	3308      	adds	r3, #8
 8005540:	9303      	str	r3, [sp, #12]
 8005542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005544:	4433      	add	r3, r6
 8005546:	9309      	str	r3, [sp, #36]	; 0x24
 8005548:	e767      	b.n	800541a <_svfiprintf_r+0x4e>
 800554a:	fb0c 3202 	mla	r2, ip, r2, r3
 800554e:	460c      	mov	r4, r1
 8005550:	2001      	movs	r0, #1
 8005552:	e7a5      	b.n	80054a0 <_svfiprintf_r+0xd4>
 8005554:	2300      	movs	r3, #0
 8005556:	3401      	adds	r4, #1
 8005558:	9305      	str	r3, [sp, #20]
 800555a:	4619      	mov	r1, r3
 800555c:	f04f 0c0a 	mov.w	ip, #10
 8005560:	4620      	mov	r0, r4
 8005562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005566:	3a30      	subs	r2, #48	; 0x30
 8005568:	2a09      	cmp	r2, #9
 800556a:	d903      	bls.n	8005574 <_svfiprintf_r+0x1a8>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0c5      	beq.n	80054fc <_svfiprintf_r+0x130>
 8005570:	9105      	str	r1, [sp, #20]
 8005572:	e7c3      	b.n	80054fc <_svfiprintf_r+0x130>
 8005574:	fb0c 2101 	mla	r1, ip, r1, r2
 8005578:	4604      	mov	r4, r0
 800557a:	2301      	movs	r3, #1
 800557c:	e7f0      	b.n	8005560 <_svfiprintf_r+0x194>
 800557e:	ab03      	add	r3, sp, #12
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	462a      	mov	r2, r5
 8005584:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <_svfiprintf_r+0x1f8>)
 8005586:	a904      	add	r1, sp, #16
 8005588:	4638      	mov	r0, r7
 800558a:	f3af 8000 	nop.w
 800558e:	1c42      	adds	r2, r0, #1
 8005590:	4606      	mov	r6, r0
 8005592:	d1d6      	bne.n	8005542 <_svfiprintf_r+0x176>
 8005594:	89ab      	ldrh	r3, [r5, #12]
 8005596:	065b      	lsls	r3, r3, #25
 8005598:	f53f af2c 	bmi.w	80053f4 <_svfiprintf_r+0x28>
 800559c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800559e:	b01d      	add	sp, #116	; 0x74
 80055a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a4:	ab03      	add	r3, sp, #12
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	462a      	mov	r2, r5
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <_svfiprintf_r+0x1f8>)
 80055ac:	a904      	add	r1, sp, #16
 80055ae:	4638      	mov	r0, r7
 80055b0:	f000 f87a 	bl	80056a8 <_printf_i>
 80055b4:	e7eb      	b.n	800558e <_svfiprintf_r+0x1c2>
 80055b6:	bf00      	nop
 80055b8:	08005c50 	.word	0x08005c50
 80055bc:	08005c5a 	.word	0x08005c5a
 80055c0:	00000000 	.word	0x00000000
 80055c4:	08005315 	.word	0x08005315
 80055c8:	08005c56 	.word	0x08005c56

080055cc <_printf_common>:
 80055cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	4616      	mov	r6, r2
 80055d2:	4699      	mov	r9, r3
 80055d4:	688a      	ldr	r2, [r1, #8]
 80055d6:	690b      	ldr	r3, [r1, #16]
 80055d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055dc:	4293      	cmp	r3, r2
 80055de:	bfb8      	it	lt
 80055e0:	4613      	movlt	r3, r2
 80055e2:	6033      	str	r3, [r6, #0]
 80055e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e8:	4607      	mov	r7, r0
 80055ea:	460c      	mov	r4, r1
 80055ec:	b10a      	cbz	r2, 80055f2 <_printf_common+0x26>
 80055ee:	3301      	adds	r3, #1
 80055f0:	6033      	str	r3, [r6, #0]
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	0699      	lsls	r1, r3, #26
 80055f6:	bf42      	ittt	mi
 80055f8:	6833      	ldrmi	r3, [r6, #0]
 80055fa:	3302      	addmi	r3, #2
 80055fc:	6033      	strmi	r3, [r6, #0]
 80055fe:	6825      	ldr	r5, [r4, #0]
 8005600:	f015 0506 	ands.w	r5, r5, #6
 8005604:	d106      	bne.n	8005614 <_printf_common+0x48>
 8005606:	f104 0a19 	add.w	sl, r4, #25
 800560a:	68e3      	ldr	r3, [r4, #12]
 800560c:	6832      	ldr	r2, [r6, #0]
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	42ab      	cmp	r3, r5
 8005612:	dc26      	bgt.n	8005662 <_printf_common+0x96>
 8005614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005618:	1e13      	subs	r3, r2, #0
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	bf18      	it	ne
 800561e:	2301      	movne	r3, #1
 8005620:	0692      	lsls	r2, r2, #26
 8005622:	d42b      	bmi.n	800567c <_printf_common+0xb0>
 8005624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005628:	4649      	mov	r1, r9
 800562a:	4638      	mov	r0, r7
 800562c:	47c0      	blx	r8
 800562e:	3001      	adds	r0, #1
 8005630:	d01e      	beq.n	8005670 <_printf_common+0xa4>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	68e5      	ldr	r5, [r4, #12]
 8005636:	6832      	ldr	r2, [r6, #0]
 8005638:	f003 0306 	and.w	r3, r3, #6
 800563c:	2b04      	cmp	r3, #4
 800563e:	bf08      	it	eq
 8005640:	1aad      	subeq	r5, r5, r2
 8005642:	68a3      	ldr	r3, [r4, #8]
 8005644:	6922      	ldr	r2, [r4, #16]
 8005646:	bf0c      	ite	eq
 8005648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800564c:	2500      	movne	r5, #0
 800564e:	4293      	cmp	r3, r2
 8005650:	bfc4      	itt	gt
 8005652:	1a9b      	subgt	r3, r3, r2
 8005654:	18ed      	addgt	r5, r5, r3
 8005656:	2600      	movs	r6, #0
 8005658:	341a      	adds	r4, #26
 800565a:	42b5      	cmp	r5, r6
 800565c:	d11a      	bne.n	8005694 <_printf_common+0xc8>
 800565e:	2000      	movs	r0, #0
 8005660:	e008      	b.n	8005674 <_printf_common+0xa8>
 8005662:	2301      	movs	r3, #1
 8005664:	4652      	mov	r2, sl
 8005666:	4649      	mov	r1, r9
 8005668:	4638      	mov	r0, r7
 800566a:	47c0      	blx	r8
 800566c:	3001      	adds	r0, #1
 800566e:	d103      	bne.n	8005678 <_printf_common+0xac>
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005678:	3501      	adds	r5, #1
 800567a:	e7c6      	b.n	800560a <_printf_common+0x3e>
 800567c:	18e1      	adds	r1, r4, r3
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	2030      	movs	r0, #48	; 0x30
 8005682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005686:	4422      	add	r2, r4
 8005688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800568c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005690:	3302      	adds	r3, #2
 8005692:	e7c7      	b.n	8005624 <_printf_common+0x58>
 8005694:	2301      	movs	r3, #1
 8005696:	4622      	mov	r2, r4
 8005698:	4649      	mov	r1, r9
 800569a:	4638      	mov	r0, r7
 800569c:	47c0      	blx	r8
 800569e:	3001      	adds	r0, #1
 80056a0:	d0e6      	beq.n	8005670 <_printf_common+0xa4>
 80056a2:	3601      	adds	r6, #1
 80056a4:	e7d9      	b.n	800565a <_printf_common+0x8e>
	...

080056a8 <_printf_i>:
 80056a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056ac:	460c      	mov	r4, r1
 80056ae:	4691      	mov	r9, r2
 80056b0:	7e27      	ldrb	r7, [r4, #24]
 80056b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056b4:	2f78      	cmp	r7, #120	; 0x78
 80056b6:	4680      	mov	r8, r0
 80056b8:	469a      	mov	sl, r3
 80056ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056be:	d807      	bhi.n	80056d0 <_printf_i+0x28>
 80056c0:	2f62      	cmp	r7, #98	; 0x62
 80056c2:	d80a      	bhi.n	80056da <_printf_i+0x32>
 80056c4:	2f00      	cmp	r7, #0
 80056c6:	f000 80d8 	beq.w	800587a <_printf_i+0x1d2>
 80056ca:	2f58      	cmp	r7, #88	; 0x58
 80056cc:	f000 80a3 	beq.w	8005816 <_printf_i+0x16e>
 80056d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056d8:	e03a      	b.n	8005750 <_printf_i+0xa8>
 80056da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056de:	2b15      	cmp	r3, #21
 80056e0:	d8f6      	bhi.n	80056d0 <_printf_i+0x28>
 80056e2:	a001      	add	r0, pc, #4	; (adr r0, 80056e8 <_printf_i+0x40>)
 80056e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056e8:	08005741 	.word	0x08005741
 80056ec:	08005755 	.word	0x08005755
 80056f0:	080056d1 	.word	0x080056d1
 80056f4:	080056d1 	.word	0x080056d1
 80056f8:	080056d1 	.word	0x080056d1
 80056fc:	080056d1 	.word	0x080056d1
 8005700:	08005755 	.word	0x08005755
 8005704:	080056d1 	.word	0x080056d1
 8005708:	080056d1 	.word	0x080056d1
 800570c:	080056d1 	.word	0x080056d1
 8005710:	080056d1 	.word	0x080056d1
 8005714:	08005861 	.word	0x08005861
 8005718:	08005785 	.word	0x08005785
 800571c:	08005843 	.word	0x08005843
 8005720:	080056d1 	.word	0x080056d1
 8005724:	080056d1 	.word	0x080056d1
 8005728:	08005883 	.word	0x08005883
 800572c:	080056d1 	.word	0x080056d1
 8005730:	08005785 	.word	0x08005785
 8005734:	080056d1 	.word	0x080056d1
 8005738:	080056d1 	.word	0x080056d1
 800573c:	0800584b 	.word	0x0800584b
 8005740:	680b      	ldr	r3, [r1, #0]
 8005742:	1d1a      	adds	r2, r3, #4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	600a      	str	r2, [r1, #0]
 8005748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800574c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005750:	2301      	movs	r3, #1
 8005752:	e0a3      	b.n	800589c <_printf_i+0x1f4>
 8005754:	6825      	ldr	r5, [r4, #0]
 8005756:	6808      	ldr	r0, [r1, #0]
 8005758:	062e      	lsls	r6, r5, #24
 800575a:	f100 0304 	add.w	r3, r0, #4
 800575e:	d50a      	bpl.n	8005776 <_printf_i+0xce>
 8005760:	6805      	ldr	r5, [r0, #0]
 8005762:	600b      	str	r3, [r1, #0]
 8005764:	2d00      	cmp	r5, #0
 8005766:	da03      	bge.n	8005770 <_printf_i+0xc8>
 8005768:	232d      	movs	r3, #45	; 0x2d
 800576a:	426d      	negs	r5, r5
 800576c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005770:	485e      	ldr	r0, [pc, #376]	; (80058ec <_printf_i+0x244>)
 8005772:	230a      	movs	r3, #10
 8005774:	e019      	b.n	80057aa <_printf_i+0x102>
 8005776:	f015 0f40 	tst.w	r5, #64	; 0x40
 800577a:	6805      	ldr	r5, [r0, #0]
 800577c:	600b      	str	r3, [r1, #0]
 800577e:	bf18      	it	ne
 8005780:	b22d      	sxthne	r5, r5
 8005782:	e7ef      	b.n	8005764 <_printf_i+0xbc>
 8005784:	680b      	ldr	r3, [r1, #0]
 8005786:	6825      	ldr	r5, [r4, #0]
 8005788:	1d18      	adds	r0, r3, #4
 800578a:	6008      	str	r0, [r1, #0]
 800578c:	0628      	lsls	r0, r5, #24
 800578e:	d501      	bpl.n	8005794 <_printf_i+0xec>
 8005790:	681d      	ldr	r5, [r3, #0]
 8005792:	e002      	b.n	800579a <_printf_i+0xf2>
 8005794:	0669      	lsls	r1, r5, #25
 8005796:	d5fb      	bpl.n	8005790 <_printf_i+0xe8>
 8005798:	881d      	ldrh	r5, [r3, #0]
 800579a:	4854      	ldr	r0, [pc, #336]	; (80058ec <_printf_i+0x244>)
 800579c:	2f6f      	cmp	r7, #111	; 0x6f
 800579e:	bf0c      	ite	eq
 80057a0:	2308      	moveq	r3, #8
 80057a2:	230a      	movne	r3, #10
 80057a4:	2100      	movs	r1, #0
 80057a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057aa:	6866      	ldr	r6, [r4, #4]
 80057ac:	60a6      	str	r6, [r4, #8]
 80057ae:	2e00      	cmp	r6, #0
 80057b0:	bfa2      	ittt	ge
 80057b2:	6821      	ldrge	r1, [r4, #0]
 80057b4:	f021 0104 	bicge.w	r1, r1, #4
 80057b8:	6021      	strge	r1, [r4, #0]
 80057ba:	b90d      	cbnz	r5, 80057c0 <_printf_i+0x118>
 80057bc:	2e00      	cmp	r6, #0
 80057be:	d04d      	beq.n	800585c <_printf_i+0x1b4>
 80057c0:	4616      	mov	r6, r2
 80057c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80057c6:	fb03 5711 	mls	r7, r3, r1, r5
 80057ca:	5dc7      	ldrb	r7, [r0, r7]
 80057cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057d0:	462f      	mov	r7, r5
 80057d2:	42bb      	cmp	r3, r7
 80057d4:	460d      	mov	r5, r1
 80057d6:	d9f4      	bls.n	80057c2 <_printf_i+0x11a>
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d10b      	bne.n	80057f4 <_printf_i+0x14c>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	07df      	lsls	r7, r3, #31
 80057e0:	d508      	bpl.n	80057f4 <_printf_i+0x14c>
 80057e2:	6923      	ldr	r3, [r4, #16]
 80057e4:	6861      	ldr	r1, [r4, #4]
 80057e6:	4299      	cmp	r1, r3
 80057e8:	bfde      	ittt	le
 80057ea:	2330      	movle	r3, #48	; 0x30
 80057ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057f4:	1b92      	subs	r2, r2, r6
 80057f6:	6122      	str	r2, [r4, #16]
 80057f8:	f8cd a000 	str.w	sl, [sp]
 80057fc:	464b      	mov	r3, r9
 80057fe:	aa03      	add	r2, sp, #12
 8005800:	4621      	mov	r1, r4
 8005802:	4640      	mov	r0, r8
 8005804:	f7ff fee2 	bl	80055cc <_printf_common>
 8005808:	3001      	adds	r0, #1
 800580a:	d14c      	bne.n	80058a6 <_printf_i+0x1fe>
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	b004      	add	sp, #16
 8005812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005816:	4835      	ldr	r0, [pc, #212]	; (80058ec <_printf_i+0x244>)
 8005818:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	680e      	ldr	r6, [r1, #0]
 8005820:	061f      	lsls	r7, r3, #24
 8005822:	f856 5b04 	ldr.w	r5, [r6], #4
 8005826:	600e      	str	r6, [r1, #0]
 8005828:	d514      	bpl.n	8005854 <_printf_i+0x1ac>
 800582a:	07d9      	lsls	r1, r3, #31
 800582c:	bf44      	itt	mi
 800582e:	f043 0320 	orrmi.w	r3, r3, #32
 8005832:	6023      	strmi	r3, [r4, #0]
 8005834:	b91d      	cbnz	r5, 800583e <_printf_i+0x196>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	f023 0320 	bic.w	r3, r3, #32
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	2310      	movs	r3, #16
 8005840:	e7b0      	b.n	80057a4 <_printf_i+0xfc>
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	f043 0320 	orr.w	r3, r3, #32
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	2378      	movs	r3, #120	; 0x78
 800584c:	4828      	ldr	r0, [pc, #160]	; (80058f0 <_printf_i+0x248>)
 800584e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005852:	e7e3      	b.n	800581c <_printf_i+0x174>
 8005854:	065e      	lsls	r6, r3, #25
 8005856:	bf48      	it	mi
 8005858:	b2ad      	uxthmi	r5, r5
 800585a:	e7e6      	b.n	800582a <_printf_i+0x182>
 800585c:	4616      	mov	r6, r2
 800585e:	e7bb      	b.n	80057d8 <_printf_i+0x130>
 8005860:	680b      	ldr	r3, [r1, #0]
 8005862:	6826      	ldr	r6, [r4, #0]
 8005864:	6960      	ldr	r0, [r4, #20]
 8005866:	1d1d      	adds	r5, r3, #4
 8005868:	600d      	str	r5, [r1, #0]
 800586a:	0635      	lsls	r5, r6, #24
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	d501      	bpl.n	8005874 <_printf_i+0x1cc>
 8005870:	6018      	str	r0, [r3, #0]
 8005872:	e002      	b.n	800587a <_printf_i+0x1d2>
 8005874:	0671      	lsls	r1, r6, #25
 8005876:	d5fb      	bpl.n	8005870 <_printf_i+0x1c8>
 8005878:	8018      	strh	r0, [r3, #0]
 800587a:	2300      	movs	r3, #0
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	4616      	mov	r6, r2
 8005880:	e7ba      	b.n	80057f8 <_printf_i+0x150>
 8005882:	680b      	ldr	r3, [r1, #0]
 8005884:	1d1a      	adds	r2, r3, #4
 8005886:	600a      	str	r2, [r1, #0]
 8005888:	681e      	ldr	r6, [r3, #0]
 800588a:	6862      	ldr	r2, [r4, #4]
 800588c:	2100      	movs	r1, #0
 800588e:	4630      	mov	r0, r6
 8005890:	f7fa fcce 	bl	8000230 <memchr>
 8005894:	b108      	cbz	r0, 800589a <_printf_i+0x1f2>
 8005896:	1b80      	subs	r0, r0, r6
 8005898:	6060      	str	r0, [r4, #4]
 800589a:	6863      	ldr	r3, [r4, #4]
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	2300      	movs	r3, #0
 80058a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a4:	e7a8      	b.n	80057f8 <_printf_i+0x150>
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	4632      	mov	r2, r6
 80058aa:	4649      	mov	r1, r9
 80058ac:	4640      	mov	r0, r8
 80058ae:	47d0      	blx	sl
 80058b0:	3001      	adds	r0, #1
 80058b2:	d0ab      	beq.n	800580c <_printf_i+0x164>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	079b      	lsls	r3, r3, #30
 80058b8:	d413      	bmi.n	80058e2 <_printf_i+0x23a>
 80058ba:	68e0      	ldr	r0, [r4, #12]
 80058bc:	9b03      	ldr	r3, [sp, #12]
 80058be:	4298      	cmp	r0, r3
 80058c0:	bfb8      	it	lt
 80058c2:	4618      	movlt	r0, r3
 80058c4:	e7a4      	b.n	8005810 <_printf_i+0x168>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4632      	mov	r2, r6
 80058ca:	4649      	mov	r1, r9
 80058cc:	4640      	mov	r0, r8
 80058ce:	47d0      	blx	sl
 80058d0:	3001      	adds	r0, #1
 80058d2:	d09b      	beq.n	800580c <_printf_i+0x164>
 80058d4:	3501      	adds	r5, #1
 80058d6:	68e3      	ldr	r3, [r4, #12]
 80058d8:	9903      	ldr	r1, [sp, #12]
 80058da:	1a5b      	subs	r3, r3, r1
 80058dc:	42ab      	cmp	r3, r5
 80058de:	dcf2      	bgt.n	80058c6 <_printf_i+0x21e>
 80058e0:	e7eb      	b.n	80058ba <_printf_i+0x212>
 80058e2:	2500      	movs	r5, #0
 80058e4:	f104 0619 	add.w	r6, r4, #25
 80058e8:	e7f5      	b.n	80058d6 <_printf_i+0x22e>
 80058ea:	bf00      	nop
 80058ec:	08005c61 	.word	0x08005c61
 80058f0:	08005c72 	.word	0x08005c72

080058f4 <memcpy>:
 80058f4:	440a      	add	r2, r1
 80058f6:	4291      	cmp	r1, r2
 80058f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058fc:	d100      	bne.n	8005900 <memcpy+0xc>
 80058fe:	4770      	bx	lr
 8005900:	b510      	push	{r4, lr}
 8005902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800590a:	4291      	cmp	r1, r2
 800590c:	d1f9      	bne.n	8005902 <memcpy+0xe>
 800590e:	bd10      	pop	{r4, pc}

08005910 <memmove>:
 8005910:	4288      	cmp	r0, r1
 8005912:	b510      	push	{r4, lr}
 8005914:	eb01 0402 	add.w	r4, r1, r2
 8005918:	d902      	bls.n	8005920 <memmove+0x10>
 800591a:	4284      	cmp	r4, r0
 800591c:	4623      	mov	r3, r4
 800591e:	d807      	bhi.n	8005930 <memmove+0x20>
 8005920:	1e43      	subs	r3, r0, #1
 8005922:	42a1      	cmp	r1, r4
 8005924:	d008      	beq.n	8005938 <memmove+0x28>
 8005926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800592a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800592e:	e7f8      	b.n	8005922 <memmove+0x12>
 8005930:	4402      	add	r2, r0
 8005932:	4601      	mov	r1, r0
 8005934:	428a      	cmp	r2, r1
 8005936:	d100      	bne.n	800593a <memmove+0x2a>
 8005938:	bd10      	pop	{r4, pc}
 800593a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800593e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005942:	e7f7      	b.n	8005934 <memmove+0x24>

08005944 <_free_r>:
 8005944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005946:	2900      	cmp	r1, #0
 8005948:	d048      	beq.n	80059dc <_free_r+0x98>
 800594a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800594e:	9001      	str	r0, [sp, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	f1a1 0404 	sub.w	r4, r1, #4
 8005956:	bfb8      	it	lt
 8005958:	18e4      	addlt	r4, r4, r3
 800595a:	f000 f8d3 	bl	8005b04 <__malloc_lock>
 800595e:	4a20      	ldr	r2, [pc, #128]	; (80059e0 <_free_r+0x9c>)
 8005960:	9801      	ldr	r0, [sp, #4]
 8005962:	6813      	ldr	r3, [r2, #0]
 8005964:	4615      	mov	r5, r2
 8005966:	b933      	cbnz	r3, 8005976 <_free_r+0x32>
 8005968:	6063      	str	r3, [r4, #4]
 800596a:	6014      	str	r4, [r2, #0]
 800596c:	b003      	add	sp, #12
 800596e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005972:	f000 b8cd 	b.w	8005b10 <__malloc_unlock>
 8005976:	42a3      	cmp	r3, r4
 8005978:	d90b      	bls.n	8005992 <_free_r+0x4e>
 800597a:	6821      	ldr	r1, [r4, #0]
 800597c:	1862      	adds	r2, r4, r1
 800597e:	4293      	cmp	r3, r2
 8005980:	bf04      	itt	eq
 8005982:	681a      	ldreq	r2, [r3, #0]
 8005984:	685b      	ldreq	r3, [r3, #4]
 8005986:	6063      	str	r3, [r4, #4]
 8005988:	bf04      	itt	eq
 800598a:	1852      	addeq	r2, r2, r1
 800598c:	6022      	streq	r2, [r4, #0]
 800598e:	602c      	str	r4, [r5, #0]
 8005990:	e7ec      	b.n	800596c <_free_r+0x28>
 8005992:	461a      	mov	r2, r3
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	b10b      	cbz	r3, 800599c <_free_r+0x58>
 8005998:	42a3      	cmp	r3, r4
 800599a:	d9fa      	bls.n	8005992 <_free_r+0x4e>
 800599c:	6811      	ldr	r1, [r2, #0]
 800599e:	1855      	adds	r5, r2, r1
 80059a0:	42a5      	cmp	r5, r4
 80059a2:	d10b      	bne.n	80059bc <_free_r+0x78>
 80059a4:	6824      	ldr	r4, [r4, #0]
 80059a6:	4421      	add	r1, r4
 80059a8:	1854      	adds	r4, r2, r1
 80059aa:	42a3      	cmp	r3, r4
 80059ac:	6011      	str	r1, [r2, #0]
 80059ae:	d1dd      	bne.n	800596c <_free_r+0x28>
 80059b0:	681c      	ldr	r4, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	6053      	str	r3, [r2, #4]
 80059b6:	4421      	add	r1, r4
 80059b8:	6011      	str	r1, [r2, #0]
 80059ba:	e7d7      	b.n	800596c <_free_r+0x28>
 80059bc:	d902      	bls.n	80059c4 <_free_r+0x80>
 80059be:	230c      	movs	r3, #12
 80059c0:	6003      	str	r3, [r0, #0]
 80059c2:	e7d3      	b.n	800596c <_free_r+0x28>
 80059c4:	6825      	ldr	r5, [r4, #0]
 80059c6:	1961      	adds	r1, r4, r5
 80059c8:	428b      	cmp	r3, r1
 80059ca:	bf04      	itt	eq
 80059cc:	6819      	ldreq	r1, [r3, #0]
 80059ce:	685b      	ldreq	r3, [r3, #4]
 80059d0:	6063      	str	r3, [r4, #4]
 80059d2:	bf04      	itt	eq
 80059d4:	1949      	addeq	r1, r1, r5
 80059d6:	6021      	streq	r1, [r4, #0]
 80059d8:	6054      	str	r4, [r2, #4]
 80059da:	e7c7      	b.n	800596c <_free_r+0x28>
 80059dc:	b003      	add	sp, #12
 80059de:	bd30      	pop	{r4, r5, pc}
 80059e0:	200000e4 	.word	0x200000e4

080059e4 <_malloc_r>:
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	1ccd      	adds	r5, r1, #3
 80059e8:	f025 0503 	bic.w	r5, r5, #3
 80059ec:	3508      	adds	r5, #8
 80059ee:	2d0c      	cmp	r5, #12
 80059f0:	bf38      	it	cc
 80059f2:	250c      	movcc	r5, #12
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	4606      	mov	r6, r0
 80059f8:	db01      	blt.n	80059fe <_malloc_r+0x1a>
 80059fa:	42a9      	cmp	r1, r5
 80059fc:	d903      	bls.n	8005a06 <_malloc_r+0x22>
 80059fe:	230c      	movs	r3, #12
 8005a00:	6033      	str	r3, [r6, #0]
 8005a02:	2000      	movs	r0, #0
 8005a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a06:	f000 f87d 	bl	8005b04 <__malloc_lock>
 8005a0a:	4921      	ldr	r1, [pc, #132]	; (8005a90 <_malloc_r+0xac>)
 8005a0c:	680a      	ldr	r2, [r1, #0]
 8005a0e:	4614      	mov	r4, r2
 8005a10:	b99c      	cbnz	r4, 8005a3a <_malloc_r+0x56>
 8005a12:	4f20      	ldr	r7, [pc, #128]	; (8005a94 <_malloc_r+0xb0>)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	b923      	cbnz	r3, 8005a22 <_malloc_r+0x3e>
 8005a18:	4621      	mov	r1, r4
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f000 f862 	bl	8005ae4 <_sbrk_r>
 8005a20:	6038      	str	r0, [r7, #0]
 8005a22:	4629      	mov	r1, r5
 8005a24:	4630      	mov	r0, r6
 8005a26:	f000 f85d 	bl	8005ae4 <_sbrk_r>
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d123      	bne.n	8005a76 <_malloc_r+0x92>
 8005a2e:	230c      	movs	r3, #12
 8005a30:	6033      	str	r3, [r6, #0]
 8005a32:	4630      	mov	r0, r6
 8005a34:	f000 f86c 	bl	8005b10 <__malloc_unlock>
 8005a38:	e7e3      	b.n	8005a02 <_malloc_r+0x1e>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	1b5b      	subs	r3, r3, r5
 8005a3e:	d417      	bmi.n	8005a70 <_malloc_r+0x8c>
 8005a40:	2b0b      	cmp	r3, #11
 8005a42:	d903      	bls.n	8005a4c <_malloc_r+0x68>
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	441c      	add	r4, r3
 8005a48:	6025      	str	r5, [r4, #0]
 8005a4a:	e004      	b.n	8005a56 <_malloc_r+0x72>
 8005a4c:	6863      	ldr	r3, [r4, #4]
 8005a4e:	42a2      	cmp	r2, r4
 8005a50:	bf0c      	ite	eq
 8005a52:	600b      	streq	r3, [r1, #0]
 8005a54:	6053      	strne	r3, [r2, #4]
 8005a56:	4630      	mov	r0, r6
 8005a58:	f000 f85a 	bl	8005b10 <__malloc_unlock>
 8005a5c:	f104 000b 	add.w	r0, r4, #11
 8005a60:	1d23      	adds	r3, r4, #4
 8005a62:	f020 0007 	bic.w	r0, r0, #7
 8005a66:	1ac2      	subs	r2, r0, r3
 8005a68:	d0cc      	beq.n	8005a04 <_malloc_r+0x20>
 8005a6a:	1a1b      	subs	r3, r3, r0
 8005a6c:	50a3      	str	r3, [r4, r2]
 8005a6e:	e7c9      	b.n	8005a04 <_malloc_r+0x20>
 8005a70:	4622      	mov	r2, r4
 8005a72:	6864      	ldr	r4, [r4, #4]
 8005a74:	e7cc      	b.n	8005a10 <_malloc_r+0x2c>
 8005a76:	1cc4      	adds	r4, r0, #3
 8005a78:	f024 0403 	bic.w	r4, r4, #3
 8005a7c:	42a0      	cmp	r0, r4
 8005a7e:	d0e3      	beq.n	8005a48 <_malloc_r+0x64>
 8005a80:	1a21      	subs	r1, r4, r0
 8005a82:	4630      	mov	r0, r6
 8005a84:	f000 f82e 	bl	8005ae4 <_sbrk_r>
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d1dd      	bne.n	8005a48 <_malloc_r+0x64>
 8005a8c:	e7cf      	b.n	8005a2e <_malloc_r+0x4a>
 8005a8e:	bf00      	nop
 8005a90:	200000e4 	.word	0x200000e4
 8005a94:	200000e8 	.word	0x200000e8

08005a98 <_realloc_r>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	4607      	mov	r7, r0
 8005a9c:	4614      	mov	r4, r2
 8005a9e:	460e      	mov	r6, r1
 8005aa0:	b921      	cbnz	r1, 8005aac <_realloc_r+0x14>
 8005aa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	f7ff bf9c 	b.w	80059e4 <_malloc_r>
 8005aac:	b922      	cbnz	r2, 8005ab8 <_realloc_r+0x20>
 8005aae:	f7ff ff49 	bl	8005944 <_free_r>
 8005ab2:	4625      	mov	r5, r4
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab8:	f000 f830 	bl	8005b1c <_malloc_usable_size_r>
 8005abc:	42a0      	cmp	r0, r4
 8005abe:	d20f      	bcs.n	8005ae0 <_realloc_r+0x48>
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	f7ff ff8e 	bl	80059e4 <_malloc_r>
 8005ac8:	4605      	mov	r5, r0
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d0f2      	beq.n	8005ab4 <_realloc_r+0x1c>
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	f7ff ff0f 	bl	80058f4 <memcpy>
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4638      	mov	r0, r7
 8005ada:	f7ff ff33 	bl	8005944 <_free_r>
 8005ade:	e7e9      	b.n	8005ab4 <_realloc_r+0x1c>
 8005ae0:	4635      	mov	r5, r6
 8005ae2:	e7e7      	b.n	8005ab4 <_realloc_r+0x1c>

08005ae4 <_sbrk_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4d06      	ldr	r5, [pc, #24]	; (8005b00 <_sbrk_r+0x1c>)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4604      	mov	r4, r0
 8005aec:	4608      	mov	r0, r1
 8005aee:	602b      	str	r3, [r5, #0]
 8005af0:	f7fb fe42 	bl	8001778 <_sbrk>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d102      	bne.n	8005afe <_sbrk_r+0x1a>
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	b103      	cbz	r3, 8005afe <_sbrk_r+0x1a>
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	20000274 	.word	0x20000274

08005b04 <__malloc_lock>:
 8005b04:	4801      	ldr	r0, [pc, #4]	; (8005b0c <__malloc_lock+0x8>)
 8005b06:	f000 b811 	b.w	8005b2c <__retarget_lock_acquire_recursive>
 8005b0a:	bf00      	nop
 8005b0c:	2000027c 	.word	0x2000027c

08005b10 <__malloc_unlock>:
 8005b10:	4801      	ldr	r0, [pc, #4]	; (8005b18 <__malloc_unlock+0x8>)
 8005b12:	f000 b80c 	b.w	8005b2e <__retarget_lock_release_recursive>
 8005b16:	bf00      	nop
 8005b18:	2000027c 	.word	0x2000027c

08005b1c <_malloc_usable_size_r>:
 8005b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b20:	1f18      	subs	r0, r3, #4
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	bfbc      	itt	lt
 8005b26:	580b      	ldrlt	r3, [r1, r0]
 8005b28:	18c0      	addlt	r0, r0, r3
 8005b2a:	4770      	bx	lr

08005b2c <__retarget_lock_acquire_recursive>:
 8005b2c:	4770      	bx	lr

08005b2e <__retarget_lock_release_recursive>:
 8005b2e:	4770      	bx	lr

08005b30 <_init>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	bf00      	nop
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr

08005b3c <_fini>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr
